########################################### Code for BFS #####################################################################################
TC: O(V+E)
SC: queue (O(E))


vector<int> bfsOfGraph(vector<vector<int>> &nums) {
    int n = nums.size();
    vector<vector<int>> adj(n);

    // This is for creating an adjacency list from the adjacency matrix.
    for(int i = 0;i<n;i++){
        for(int j =0;j<n;j++){
            if(i!=j && nums[i][j]==1){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }

    // Creating adjacency list from edges.
    for(auto it:edges){
        int u = edges[0];
        int v = edges[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int cnt = 0;
    vector<int> ans, vis(n,0);
    queue<int> q;
   
    for(int i =0;i<n;i++){
        if(!vis[i]){
            q.push(i);
            vis[i]=1;

            while(!q.empty()){
                int curr = q.front();
                q.pop();
                ans.push_back(curr);
                
                for(auto it:adj[curr]){
                    if(!vis[it]){
                        vis[it] =1;
                        q.push(it);
                    }
                }
            }
            cnt++;
        }
    }
    return ans;
}


########################################### Code for DFS #############################################################################
TC: O(V+E)
SC: queue (O(E))


void dfs(int node, vector<int> &ans, vector<bool> &vis, vector<int> adj[]){
    vis[node]=1;
    ans.push_back(node);
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(it,ans,vis,adj);
        }
    }
}



########################################### Code for Topo Sort (BFS) (Kahn's Algorithm) #################################################
TC: O(V+E)       (Same as BFS)
SC: queue (O(E))


vector<int> topoSort(int V, vector<vector<int>> &adj) 
{
   // Create indegree
   vector<int> indegree(V, 0);
    for(int i = 0;i<V;i++){
        for(auto it: adj[i]){
            indegree[it]++;
        }
    }
    
    queue<int> q;
    
    // Search for the ones with 0 indegree and push them in the queue.
    for(int i = 0;i<V;i++){
       int it = indegree[i];
       if(it==0){
           q.push(i);
       }
    }
   
    vector<int> ans;
    
    while(q.size()){
       int curr =  q.front();
       q.pop();
       
       for(auto it:adj[curr]){
           indegree[it]--;
           if(indegree[it]==0){
               q.push(it);
           }
       }
       ans.push_back(curr);
    }
    return ans;
    // Checking cycle in Directed Graph if ans.size()!=V then cycle exists.
}


########################################### Code for Topo Sort (DFS) ########################################################################
TC: O(V+E)       (Same as DFS)
SC: queue (O(E))


void dfs(int v,vector<int> adj[], stack<int> &st, vector<int> &vis){
    vis[v]=1;
    for(int i = 0;i<adj[v].size();i++){
        if(vis[adj[v][i]]==-1){
            dfs(adj[v][i],adj,st,vis);
        }
    }
    st.push(v);
}

//Function to return the list containing vertices in Topological order. 
vector<int> topoSort(int V, vector<int> adj[]) 
{
    vector<int> vis(V,-1);
    stack<int> st;

    // Simple DFS with a stack. 
    for(int i =0;i<V;i++){
        if(vis[i]==-1){
            dfs(i,adj,st,vis);
        }
    }

    vector<int> ans;
    while(!st.empty()){
        ans.push_back(st.top());
        st.pop();
    }
    return ans;
}


#################################### Code for Topo Sort (DFS) For checking Cycle in Directed Graph ############################################


bool dfs(int node, vector<int> &vis, vector<int> &pathVis, vector<int> adj[]){
    vis[node] = 1;
    pathVis[node] = 1;
    
    for(auto it:adj[node]){
        if(!vis[it]){
            if(dfs(it, vis, pathVis, adj)==true)return true;
        }
        else if(pathVis[it]==1){
            return true;
        }
    }
    pathVis[node] = 0;
    return false;
}
// Function to detect cycle in a directed graph.
bool isCyclic(int V, vector<int> adj[]) {

    vector<int> pathVis(V,0), vis(V,0);

    for(int i = 0;i<V;i++){
        if(!vis[i]){
            if(dfs(i, vis, pathVis, adj)==true)return true;
        }
    }
    return false;
}


#################################### Questions on Topo Sort ####################################################################################

1 - Course Schedule, 
    => Simply apply any Topo Sort (BFS|DFS).

2 - Eventual States, means those node that reaches the terminal(Outdegree==0) nodes. 
    => So, BFS In Kahn standard algo, automatically stores valid answers.
    => In DFS we take a marked array as vis and pathVis are for cycle detection and marked will tell if at any stage we are returning due to cycle then mark it False.

3 - Alien Dictionary, strings are given in ascending order, we have to find the dictionary out of it.
    => So, Simply compare the words create a graph, and apply Standard TopoSort.
    => abad, aba this is not a valid dictionary as the initial one should be small.
    => Another example is cyclic dependency like aba, baf, abe now it says a<b<a and it is not possible.



#################################### Shortest Path Algorithms #######################################################################

