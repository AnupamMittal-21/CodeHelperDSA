########## Code for BFS ###########
########## Code for DFS ###########
########## Code for Topo Sort (BFS) (Kahn's Algorithm) ###########
########## Code for Topo Sort (DFS) ###########
########## Code for Topo Sort (DFS) For checking Cycle in Directed Graph ###########
########## Code For checking Cycle in (Un)Directed Graph using BFS | DFS ###########
########## BFS | DFS on Grids questions (0/1 Matrix)  ###########
########## BFS | DFS on Grids questions but with reverse approach ###########
########## BFS | DFS on Grids questions Word Ladder ##########
########## BFS | DFS Coloring Problem (Bipartite) ##########
########## Questions on BFS | DFS ##########
########## Questions on Topo Sort ##########
########## Shortest Path Algorithms with Unit Weight ##########
########## Shortest Path Algorithms with Variable Weight (Dijkstra's Algorithm) Using set and PQ ##########
########## Question on Matrix in 8 Direction (Binary Maze) ##########
########## Single Source Shortest Path Algorithm: Bellman Ford Algorithm ##########
########## Multi-Source Shortest Path Algorithm: Floyd Warshal Algorithm ##########
########## Question on Minimum Distance ##########
########## ##########



########################################### Code for BFS #####################################################################################
TC: O(V+E)
SC: queue (O(E))


vector<int> bfsOfGraph(vector<vector<int>> &nums) {
    int n = nums.size();
    vector<vector<int>> adj(n);

    // This is for creating an adjacency list from the adjacency matrix.
    for(int i = 0;i<n;i++){
        for(int j =0;j<n;j++){
            if(i!=j && nums[i][j]==1){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }

    // Creating adjacency list from edges.
    for(auto it:edges){
        int u = edges[0];
        int v = edges[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int cnt = 0;
    vector<int> ans, vis(n,0);
    queue<int> q;
   
    for(int i =0;i<n;i++){
        if(!vis[i]){
            q.push(i);
            vis[i]=1;

            while(!q.empty()){
                int curr = q.front();
                q.pop();
                ans.push_back(curr);
                
                for(auto it:adj[curr]){
                    if(!vis[it]){
                        vis[it] =1;
                        q.push(it);
                    }
                }
            }
            cnt++;
        }
    }
    return ans;
}


########################################### Code for DFS #############################################################################
TC: O(V+E)
SC: queue (O(E))


void dfs(int node, vector<int> &ans, vector<int> &vis, vector<int> adj[]){
    vis[node]=1;
    ans.push_back(node);
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(it,ans,vis,adj);
        }
    }
}


########################################### Code for Topo Sort (BFS) (Kahn's Algorithm) #################################################
TC: O(V+E)       (Same as BFS)
SC: queue (O(E))


vector<int> topoSort(int V, vector<vector<int>> &adj) 
{
   // Create indegree
   vector<int> indegree(V, 0);
    for(int i = 0;i<V;i++){
        for(auto it: adj[i]){
            indegree[it]++;
        }
    }
    
    queue<int> q;
    
    // Search for the ones with 0 indegree and push them in the queue.
    for(int i = 0;i<V;i++){
       int it = indegree[i];
       if(it==0){
           q.push(i);
       }
    }
   
    vector<int> ans;
    
    while(q.size()){
       int curr =  q.front();
       q.pop();
       
       for(auto it:adj[curr]){
           indegree[it]--;
           if(indegree[it]==0){
               q.push(it);
           }
       }
       ans.push_back(curr);
    }
    return ans;
    // Checking cycle in Directed Graph if ans.size()!=V then cycle exists.
}


########################################### Code for Topo Sort (DFS) ########################################################################
TC: O(V+E)       (Same as DFS)
SC: queue (O(E))


void dfs(int v,vector<int> adj[], stack<int> &st, vector<int> &vis){
    vis[v]=1;
    for(int i = 0;i<adj[v].size();i++){
        if(vis[adj[v][i]]==-1){
            dfs(adj[v][i],adj,st,vis);
        }
    }
    st.push(v);
}

//Function to return the list containing vertices in Topological order. 
vector<int> topoSort(int V, vector<int> adj[]) 
{
    vector<int> vis(V,-1);
    stack<int> st;

    // Simple DFS with a stack. 
    for(int i =0;i<V;i++){
        if(vis[i]==-1){
            dfs(i,adj,st,vis);
        }
    }

    vector<int> ans;
    while(!st.empty()){
        ans.push_back(st.top());
        st.pop();
    }
    return ans;
}


#################################### Code for Topo Sort (DFS) For checking Cycle in Directed Graph ############################################


bool dfs(int node, vector<int> &vis, vector<int> &pathVis, vector<int> adj[]){
    vis[node] = 1;
    pathVis[node] = 1;
    
    for(auto it:adj[node]){
        if(!vis[it]){
            if(dfs(it, vis, pathVis, adj)==true)return true;
        }
        else if(pathVis[it]==1){
            return true;
        }
    }
    pathVis[node] = 0;
    return false;
}
// Function to detect cycle in a directed graph.
bool isCyclic(int V, vector<int> adj[]) {

    vector<int> pathVis(V,0), vis(V,0);

    for(int i = 0;i<V;i++){
        if(!vis[i]){
            if(dfs(i, vis, pathVis, adj)==true)return true;
        }
    }
    return false;
}


#################################### Code For checking Cycle in (Un)Directed Graph using BFS | DFS ############################################

=> Keep track of Parent, and if it is a parent then continue, if it is visited then return True, and if it is not visited then visit and put in queue or call recursive function.

bool dfs(int node, int parent, vector<int> &vis, vector<int> adj[]){
    vis[node]=1;
    for(auto it:adj[node]){
        if(it==parent)continue;
        if(!vis[it]){
            if(dfs(it,node,vis,adj))return true;
        }
        else return true;
    }
    return false;
}

bool bfs(int node, int parent, vector<int> &vis, vector<int> adj[]){
    queue<pair<int,int>> q;
    
    q.push({node, parent});
    
    while(q.size()){
        pair<int, int> curr_pair = q.front();
        q.pop();
        
        int curr = curr_pair.first;
        int par = curr_pair.second;
        
        for(auto it:adj[curr]){
            if(it==par)continue;
            if(vis[it]==1){
                return true;
            }
            vis[it] = 1;
            q.push({it,curr});
        }
        
    }
    return false;
        
}   


#################################### BFS | DFS on Grids questions (0/1 Matrix) ############################################

=> 0/1 Matrix ques. This is a standard template for grids and BFS/DFS
=> Store all zeros in the queue and then start BFS to keep track of the distance store it in the queue and keep on increasing inside iterating in adjacancy.


class Solution {
    bool valid(int i, int j, int n, int m){
        return i>=0 && i<n && j>=0 && j<m;
    }

    void dfs(int node, vector<int> &ans, vector<int> &vis, vector<int> adj[]){
    vis[node]=1;
    ans.push_back(node);
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(it,ans,vis,adj);
        }
    }
}


public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& grid) {
        queue<pair<int,pair<int,int>>> q;
        int n = grid.size();
        int m = grid[0].size();        
        vector<vector<int>> vis(n,vector<int>(m,0)), dist(n,vector<int>(m,INT_MAX));

        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==0){
                    q.push({0,{i,j}});
                    vis[i][j] = 1;
                    dist[i][j] = 0;
                }
            }
        }

        int x[] = {0,0,1,-1};
        int y[] = {-1,1,0,0};


        while(q.size()){
            pair<int,pair<int,int>> curr_pair = q.front();
            q.pop();

            int dis = curr_pair.first;
            int i = curr_pair.second.first;
            int j = curr_pair.second.second;

            for(int k = 0;k<4;k++){
                int new_i = i+x[k];
                int new_j = j+y[k];

                if(valid(new_i, new_j, n,m)){
                    if(grid[new_i][new_j]==1 && !vis[new_i][new_j]){
                        int new_dist = min(dist[new_i][new_j], dis+1);
                        dist[new_i][new_j] = new_dist;
                        vis[new_i][new_j] = 1;
                        q.push({dis+1,{new_i,new_j}});
                    }
                }
            }
        }
        return dist;
    }
};


#################################### BFS | DFS on Grids questions but with reverse approach  ############################################
=> TC: O(N*M)
=> SC: O(N*M) Generally same for most of the matrix problems.
=> (No. of Enclaves | Surrounded regions)
=>  So, we start with considering everything in the answer and start from edges, start the DFS | BFS, and mark all the reachable nodes in the answer array.


class Solution {
    bool valid(int i, int j, int n, int m){
        return i>=1 && i<n-1 && j>=1 && j<m-1;
    }

    void dfs(int i, int j, vector<vector<int>> &ans, vector<vector<int>> &vis, vector<vector<int>>& grid){
        int x[] = {0,0,1,-1};
        int y[] = {-1,1,0,0};
        int n = grid.size();
        int m = grid[0].size();   
        vis[i][j] = 1;
        ans[i][j] = 1;
        for(int k= 0 ; k<4; k++){
            int new_i = x[k] + i;
            int new_j = y[k] + j;
            if(valid(new_i,new_j,n,m) && grid[new_i][new_j]==1 && !vis[new_i][new_j]){
                dfs(new_i,new_j,ans,vis, grid);
            }
        }
    }
public:
    int numEnclaves(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int n = grid.size();
        int m = grid[0].size();        
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<vector<int>> ans(n,vector<int>(m,0));

        for(int i = 0;i<n;i++){
            if(grid[i][0]==1){
                if(!vis[i][0]){
                    dfs(i,0,ans,vis, grid);
                }
            }
            if(grid[i][m-1]==1){
                if(!vis[i][m-1]){
                    dfs(i,m-1,ans,vis, grid);
                }
            }
        }
        for(int i = 0;i<m;i++){
            if(grid[0][i]==1){
                if(!vis[0][i]){
                    dfs(0,i,ans,vis, grid);
                }
            }
            if(grid[n-1][i]==1){
                if(!vis[n-1][i]){
                    dfs(n-1,i,ans,vis, grid);
                }
            }
        }
        int cnt= 0;

        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==1 && ans[i][j]==0)cnt++;
            }
        }
        return cnt;
    }
};


#################################### BFS | DFS on Grids questions Word Ladder ############################################


int ladderLength(string startWord, string targetWord, vector<string>& wordList) {
        
    // Creation of Graph...
    queue<pair<string, int>> q;
    q.push({startWord, 1});

    unordered_set<string> st(wordList.begin(), wordList.end());
    st.erase(startWord);

    while (!q.empty())
    {
        string word = q.front().first;
        int steps = q.front().second;
        q.pop();
        
        if (word == targetWord)
            return steps;

        for (int i = 0; i < word.size(); i++)
        {
            char original = word[i];
            for (char ch = 'a'; ch <= 'z'; ch++)
            {
                word[i] = ch;
                if (st.find(word) != st.end())
                {
                    st.erase(word);
                    q.push({word, steps + 1});
                }
            }
            word[i] = original;
        }
    }
    return 0;
}


#################################### BFS | DFS Coloring Problem (Bipartite) ################################################################

TC = O(V + 2*E) for Undirected graph DFS | BFS 


bool dfs(int node, int col, int color[], vector<int> adj[]) {
    color[node] = col; 
    
    // traverse adjacent nodes
    for(auto it : adj[node]) {
        // if uncoloured
        if(color[it] == -1) {
            if(dfs(it, !col, color, adj) == false) return false; 
        }
        // if previously coloured and have the same colour
        else if(color[it] == col) {
            return false; 
        }
    }
    
    return true; 
}

#################################### Questions on BFS | DFS ####################################################################################

TC = O(V + 2*E) for Undirected graph DFS | BFS 

1 - Rotting Oranges,
    => Since this is a matrix and we are allowed to move in 4 directions the concept is the same as BFS, the only difference is
        that we have to create x and y arrays. and make sure to make a queue that has I, J, and cur_cnt. 
        Also, consider that we are not sure of the connected components. (Level Wise - BFS)
    => Why BFS because we have to move all together to get the minimum time to rot all the oranges. 
    => Always remember that in the case of matrix graph questions, we can always optimize space by changing in the given matrix like set value = -1 for visited and so on.
    
2 - Flood Fill Algorithm, Given a starting row and column we have to fill the connected pixels with a color.
    => This can be solved using BFS | DFS.
    => Simply just start with the given pixel put them in the queue and start traversing in 4 directions if the value is the same as the current node then keep on doing traversal
        and make sure to keep a new matrix in which changes are made.
    
3 - 0/1 Matrix, we have to find the distance of the nearest 0 from each cell.
    => Why BFS because we have to move all together to get the minimum distance from 0.
    => Store all zeros in the queue and then start BFS to keep track of the distance store it in the queue and keep on increasing inside iterating in adjacency.

4 - No. of Enclaves | Surrounded regions
    => The important thing in this question is that we need to approach this using reverse thinking.
    => We have to find the ones that are at the corner so all connected can't be considered in our answer.
    => So, we start with considering everything in the answer and start from edges, start the DFS | BFS, and mark all the reachable nodes in the answer array.

5 - Word Ladder - 1, Given a starting word, the ending word, and words, so change any one character and then tell the minimum steps to create the ending word.
    => So we need to first think of converting this to a graph as there are multiple options, as converting itself we can add code to do BFS and get the minimum changes.
    => Why BFS?, Because we need minimum length, so we have to keep a counter and do simultaneously through all the paths, and when we reach the ending word we just return the count.
    => In this you have to make an adjacency list, so we iterate over the length of words and then from 'a' to 'z', 
        and if the new word exists in the set, we erase the word from the set and push in the queue with an increase in level.

6 - Word Ladder - 2, Store all the minimum length sequences.
    => We are going to store the sequence in the queue, so the queue is storing the vector. And we don't erase elements now, we will erase them after completing the level.

7 - Bipartite Graph, Coloring methods If you can color the graph using 2 colors and adjacent have an alternate color.
    => Start with 2 sets and push node and flag in the queue, now while traversing in adjacency make sure to check whether the neighbor doesn't exist in the same set, 
        if it does, return false right away.
    => Another approach is that any graph with a cycle of length odd can never be a BiPartite graph.
    => So keep a color array and keep on traversing and coloring the adjacent nodes with the opposite color of the parent,
        if it is already colored then return False.
    => BFS | DFS can both work.

8 - Identical Islands,
    => Simple BFS | DFS, just keep in mind that we have to make sure that the pattern is matched, and we get the unique, so set is there for this task.
    => Now, subtract the base from all the adjacent nodes so that they become relative and the set can work properly.
    => TC: O(n*m*log(n*m))


#################################### Questions on Topo Sort ####################################################################################

1 - Course Schedule, 
    => Simply apply any Topo Sort (BFS|DFS).

2 - Eventual States, means those node that reaches the terminal(Outdegree==0) nodes. 
    => So, BFS In Kahn standard algo, automatically stores valid answers.
    => In DFS we take a marked array as vis and pathVis are for cycle detection and marked will tell if at any stage we are returning due to cycle then mark it False.

3 - Alien Dictionary, strings are given in ascending order, we have to find the dictionary out of it.
    => So, Simply compare the words create a graph, and apply Standard TopoSort.
    => abad, aba this is not a valid dictionary as the initial one should be small.
    => Another example is cyclic dependency like "aba", "baf", abe now it says a<b<a and it is not possible.



#################################### Shortest Path Algorithms with Unit Weight #######################################################################

=> Since this is unit weight so we don't priority queue as the elements in queue would already be sorted.

vector<int> shortestPath(vector<vector<int>>& edges, int n, int m, int src){
    vector<int> dist(n, INT_MAX);        
    vector<vector<int>> adj(n);
    
    for(int i = 0;i<m;i++){
        int u = edges[i][0];
        int v = edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    dist[src] = 0;
    queue<int> q;
    q.push(src);
    
    while(q.size()){
        int curr = q.front();
        q.pop();
        for(auto it:adj[curr]){
            if(dist[curr] + 1< dist[it]){
                dist[it] = dist[curr] + 1;
                q.push(it);
            }
        }
    }
    
    for(int i = 0; i<n;i++){
        if(dist[i]==INT_MAX){
            dist[i] = -1;
        }
    }
    return dist;
}


#################################### Shortest Path Algorithms with Variable Weight (Dijkstra's Algorithm) #######################################################################

=> Does not work when we have negative weights and negative cycle as well. beacause it keeps on decreasing the weights and TLE occurs.
=> We can use set and we can erase the elements from set if we get the lesser distance, so it would reduce the number of iterations but it costs log(n) 
    so it may not improve overall TC as compared to Priority Queue
=> Like in the iteration i got (10,5) means reaching node 5 with distance 10, now i am reaching it in distance 6, so it means node 5 is already visited by some other node, 
    which is bound to be present in set, so to decrease iterations remove (10,5).
=> Just add the condition if(dist[it.first]!=1e9)st.erase({dist[it.first], it.first})

=> Priority Queue Implementation. Because it prevents some iterations, as we take minimum distance, and when we get the same node but with bigger distance we don't go in BFS
=> TC: O(E log(V))
PQ -> Total nodes, log(heap size), auto it: => O(E)
TC: ( V * (pop + no of edges on each vertex * push in PQ))
= ( V * log(heap size) + ne * log(heap size))
= ( V * log(heap size)(1+ne))
Heap Size at max can be E or V^2 , ne = V-1
= ( V * V * log( V^2) ))
= ( V^2 * log(V))
= E log(V)


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
{
    set<pair<int,int>> st; 
    vector<int> dist(V, 1e9); 
    
    st.insert({0, S}); 

    dist[S] = 0;
    
    while(!st.empty()) {
        auto it = *(st.begin()); 
        int node = it.second; 
        int dis = it.first; 
        st.erase(it); 
        
        for(auto it : adj[node]) {
            int adjNode = it[0]; 
            int edgW = it[1]; 
            
            if(dis + edgW < dist[adjNode]) {
                if(dist[adjNode] != 1e9) 
                    st.erase({dist[adjNode], adjNode}); 
                    
                dist[adjNode] = dis + edgW; 
                st.insert({dist[adjNode], adjNode}); 
             }
        }
    }
    
    return dist;
}

=> Using Priority Queue...


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
{
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<>> pq; 
    vector<int> dist(V, 1e9); 
    
    pq.push({0, S}); 

    dist[S] = 0;
    // vector<int> parent(n);
    // for(int i = 0;i<V;i++)
    //     parent[i] = i;
    
    while(!pq.empty()) {
        pair<int,int> it = pq.top(); 
        int node = it.second; 
        int dis = it.first; 
        pq.pop();
        
        for(auto it : adj[node]) {
            int adjNode = it[0]; 
            int edgW = it[1]; 
            
            if(dis + edgW < dist[adjNode]) {
                // To get the Shortest path 
                // parent[adjNode] = node;
                dist[adjNode] = dis + edgW; 
                pq.push({dist[adjNode], adjNode}); 
             }
        }
    }
    
    // node = targetNode
    // while(node!=parent[node]){
    //     node = parent[node];
    // }
    // cout<< node<<endl;
    
    return dist;
}


#################################### Question on Matrix in 8 Direction (Binary Maze) #######################################################################


int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
    int n = grid.size();
    if(grid[0][0]==1 || grid[n-1][n-1]==1 )return -1;

    queue<pair<int,pair<int,int>>> pq;

    pq.push({0,{0,0}});
    vector<vector<int>> dist(n, vector<int>(n, 1e9));
    dist[0][0] = 1;

    int xi[] = {-1,-1,-1, 0, 0, 1, 1 ,1};
    int yi[] = {-1, 0, 1, -1, 1,-1, 0,1};

    if(grid[0][0]==0 && n==1) return 1;

    while(pq.size()){
        pair<int,pair<int,int>> pip = pq.front();
        pq.pop();

        int dis = pip.first;
        int x = pip.second.first;
        int y = pip.second.second;

        if(x==n-1 && y==n-1)return dis+1;
        for(int i = 0; i<8; i++){
            int xn = x+xi[i];
            int yn= y+yi[i];
            
            if(xn>=0 && yn>=0 && xn<n && yn<n && grid[xn][yn]==0 && dist[xn][yn]> 1 + dis){ 
                if(xn==n-1 && yn==n-1)return dis+2;
                dist[xn][yn] = 1 + dis;
                pq.push({1+dis,{xn,yn}});
            }
        }
    }
    return -1;
}

#################################### Single Source Shortest Path Algorithm: Bellman Ford Algorithm #################################################
TC: O(V*E)
=> Why need Bellman Ford? Because Dijkstra fails on negative weights and negative cycles. As it keeps on minimising the weights and results in TLE 
=> It is Applicable only on Directed Graphs, so if we have an undirected graph, make a directed edge from u to v and v to u with the same weight.
=> Also This algorithm is used to detect negative cycles (The total edge weights of a cycle are negative).
=> Relax all the edges n-1 sequentially. In each relaxation, we go across each edges and relax them.
=> Why exactly (n-1) iterations? (Edges can be in any order) because in worst case you will take n-1 edges to reach from first to last
=> Now if after n-1 relaxation in nth iteration the weights change then it has a negative cycle.


vector<int> bellman_ford(int n, vector<vector<int>>& edges, int S) {
    vector<int> dist(n,1e8);
    dist[S] = 0;
    for(int i = 0;i<n-1;i++){
        for(auto edge:edges){
            int u = edge[0];
            int v = edge[1];
            int wt= edge[2];
            
            if(dist[u]!=1e8 && dist[u] + wt < dist[v]){
                dist[v] = dist[u] + wt;
            }  
        }
    }
    for(auto edge:edges){
        int u = edge[0];
        int v = edge[1];
        int wt= edge[2];
        
        if(dist[u]!=1e8 && dist[u] + wt < dist[v]){
            return {-1};
        }  
    }
    return dist;
}


#################################### Multi-Source Shortest Path Algorithm: Floyd Warshal Algorithm #######################################################################
TC: O(V*V*V)
SC: O(V*V)

=> Works fine even for negative weights.
=> Go via every node and try. 0->1 = 0->1 + 1->0, so this is the intuition behind this algorithm.
=> Min(dist[I][k] + dist[k][j]) => this is Dynamic programming concept. because we need precomputation.
=> In this we use an adjacency matrix for computation.
=> If this is undirected then make it directed.
=> Detecting Negative cycle -> if dist[I][I] < 0 means it is negative cycle

=> If we Apply Dijkstra on each node then TC: (V * (E log(V)) )
=> But it can't be applied in negative weights.

Code: 
void shortest_distance(vector<vector<int>>&adj){
    int n = adj.size();
    for(int i =0;i<n;i++){
        for(int j = 0;j<n;j++){
            if(adj[i][j] == -1){
                adj[i][j] = 1e9;
            }
            if(i==j)adj[i][j] = 0;
        }
    }

    // Main Logic.
    for(int via = 0;via<n;via++){
        for(int i =0;i<n;i++){
            for(int j = 0;j<n;j++){
                adj[i][j] = min(adj[i][j], adj[i][via] + adj[via][j]);
            }
        }
    }
    
    for(int i = 0;i<n;i++){
        if(adj[i][i]<0){
            // Negative cycle
            return;
        }
    }
    
    for(int i =0;i<n;i++){
        for(int j = 0;j<n;j++){
            if(adj[i][j] == 1e9){
                adj[i][j] = -1;
            }
            if(i==j)adj[i][j] = 0;
        }
    }
}



#################################### Question on Minimum Distance #######################################################################



Questions on Distance

1 - Minimum distance in the binary maze, [0][0] se [n-1][n-1] pe jana h, so only 0 can be moved so find least time.
    => Since in this question the distance increases by 1, so we don't need a priority queue, we should work with a queue only as it will save the logV term.
    => Since we are dealing with distances, we can use Dijkstra's algorithm but with a queue
    => Take a 2D distance array, create a queue, push the initial and distance of initial to 0 and rest INF, then for till the queue is not empty, 
        8 moves and check its validity and distance condition 

2 - Path with minimum Effort, 
    => We have to find the path where the maximum of the absolute difference of adjacent nodes taken is the minimum.
    => int new_dis = max(dis, abs(grid[nx][ny] - grid[i][j]));
    => just this is the new formula to find the distance rest is same Dijkstra algorithm.

3 - Cheapest Flights within K stops, VERY GOOD QUESTION, CONCEPT IS SLIGHTLY DIFFERENT
    => Simple Dijkstra fails, as we have to prioritize the No of stops then time, as there are some cases where the distance is more but the K value is less
        so the Dijkstra algorithm will not update the correct one.
    => We need to prioritize the K value then we need to set the Distance.
    => You can also use the queue as now we are using stops and stops are increasing by one, so no need for a Priority Queue
    => Just a slight change in storing in the priority queue, store in the form of // Stops, node, distance, rather than distance, node, stop... NICE...Fascinating Question...
    => TC: FLights.size() = O(E)

4 - Multiply the numbers to make start to end,
    => Slight difference, the Distance array is 1 to 9999 and mark then INF and starts as 0
    => Since we are dealing with no of steps, it increases uniformly, so use queue
    => Simple Dijkstra now.


#################################### Minimum Spanning Tree ###################################################################################



#################################### Strongly Connected Component (Kosaraju's Algorithm) #######################################################################
TC: O(V+E)*3
=> Valid only for Directed graphs.
=> Strongly Connected component means -> every pair of vertices is reachable from one to the other in a component
=> Algorithm:
    => 1 - Sort all the edges according to their finishing time.
    => 2 - Reverse the graph
    => 3 - Start DFS


void dfs(int node, vector<int> &vis, stack<int> &st, vector<vector<int>> &adj){
    vis[node] = 1;
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(it, vis, st, adj);
        }
    }
    st.push(node);
}
public:

int kosaraju(int V, vector<vector<int>>& adj)
{
    vector<int> vis(V, 0);
    stack<int> st;
    
    for(int i = 0;i<V;i++){
        if(!vis[i]){
            dfs(i,vis,st,adj);
        }
    }
    
    vector<vector<int>>  adjT(V);
    for(int i =0;i<V;i++){
        vis[i] = 0;
        for(auto it:adj[i]){
            adjT[it].push_back(i);
        }
    }
    
    int scc = 0;
    stack<int> sl;
    while(st.size()){
        int i=st.top();
        st.pop();
        if(!vis[i]){
            scc++;
            dfs(i,vis,sl,adjT);
        }
    }
    return scc;
}


#################################### Critical Connected Component (Bridge in Graph | Tarjan's Algorithm) #############################################################
TC: O(V+2E) = DFS
SC: O(V+2E) + O(3N)

=> Remove an edge and if the graph is broken into 2 or more components then it is called a bridge.
=> Take 2 arrays Time array which states the order or time in which the node is called via a DFS
=> Other array is Low array which stores the lowest time insertion of all adjacent nodes apart from parent
=> Because we want to know if we can reach from other node than parent so this edge can't be the bridge.


int timer = 0;
void dfs(int node, int parent, vector<int> &time,vector<int> &low, vector<int> &vis, vector<vector<int>>& adj, vector<vector<int>>& ans)
{
    vis[node] = 1;
    time[node] = low[node] = timer;
    timer++;
    for(auto it:adj[node]){
        if(it==parent)continue;
        if(!vis[it]){
            dfs(it,node,time,low,vis,adj, ans);
            low[node] = min(low[node], low[it]);  
            if(low[it] > time[node]){
                ans.push_back({it,node});
            }
        }
        else{
            low[node] = min(low[node], low[it]);  
        }
    }
}


#################################### Critical Connected Component (Articulation Points in Graph) #############################################################
TC: O(V+2E) = DFS
SC: O(V+2E) + O(3N)
=> If we remove the node and graph breaks into more than 1 component then the node is articulation point.
=> This i skinda same as bridges in graph, but in low we also dont consider the visited node to update the low array.


int timer = 1;
void dfs(int node, int parent, vector<int> &vis, int tin[], int low[],
         vector<int> &mark, vector<int>adj[]) {
    vis[node] = 1;
    tin[node] = low[node] = timer;
    timer++;
    int child = 0;
    for (auto it : adj[node]) {
        if (it == parent) continue;
        if (!vis[it]) {
            dfs(it, node, vis, tin, low, mark, adj);
            low[node] = min(low[node], low[it]);
            if (low[it] >= tin[node] && parent != -1) {
                mark[node] = 1;
            }
            child++;
        }
        else {
            low[node] = min(low[node], tin[it]);
        }
    }
    if (child > 1 && parent == -1) {
        mark[node] = 1;
    }
}
public:
vector<int> articulationPoints(int n, vector<int>adj[]) {
    vector<int> vis(n, 0);
    int tin[n];
    int low[n];
    vector<int> mark(n, 0);
    
    for (int i = 0; i < n; i++) {
        if (!vis[i]) {
            dfs(i, -1, vis, tin, low, mark, adj);
        }
    }

    vector<int> ans;
    for (int i = 0; i < n; i++) {
        if (mark[i] == 1) {
            ans.push_back(i);
        }
    }
    if (ans.size() == 0) return { -1};
    return ans;
}
