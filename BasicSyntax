// for loop
for (int i = 0; i < nums.size(); i++) {
  cout << i;
}

// 2-D for loop
for (int i = 0; i < nums.size(); i++) {
  for (int j = 0; j < nums.size(); j++) {
    cout << nums[i][j];
  }
}

//Linear search
int search(int arr[], int n, int x)
{
    int i;
    for (i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}

// Binary search
int binarySearch(int arr[], int l, int r, int x)
{
    if (l <= r) 
    {
        int mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
        return binarySearch(arr, mid + 1, r, x);
    }
    return -1;
}

// Recursion of binary search
int binarySearch(int arr[], int l, int r, int x)
{
    while (l <= r) 
    {
        int m = l + (r - l) / 2;
        if (arr[m] == x)
            return m;
        if (arr[m] < x)
            l = m + 1;
        else
            r = m - 1;
    }
    return -1;
}

//while loop
int i = 0;
while (i <= n) {
  cout << i << " ";
  i++;
}

// do-while loop
int price = 300;
do {
  std::cout << "Too expensive!";
} while (price > 500);

// for-each loop
int fibonacci[5] = { 0, 1, 1, 2, 3 };
for (auto number:fibonacci){
  std::cout << number;
}
