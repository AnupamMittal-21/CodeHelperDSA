#include <bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
#define all(v) v.begin(), v.end()
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define repr(i, a, b) for (ll i = a; i >= b; i--)
#define read(a, n) rep(IT, 0, n) cin >> a[IT]
#define print(a, n)                         \
    {                                       \
        rep(IT, 0, n) cout << a[IT] << " "; \
        cout << "\n";                       \
    }
#define yes cout << "YES" \
                 << "\n";
#define no cout << "NO" \
                << "\n";
using namespace std;

using ll = long long;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vi = vector<int>;
using vp = vector <pii>;
using vll = vector<ll>;
using vvi = vector< vector<int> >;
using vvll = vector< vector<ll> >;
using vb = vector<bool>;
using minheap = priority_queue<int,vector<int>, greater<int>>;

ll mod = 100000007;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int t = 1;
    cin >> t;
    while(t--){
	
	int n;
        cin>>n;
        int ans = 0;
        
	vi nums(n,0);
        read(nums,n);

        cout<<ans<<endl;
        // Do stuff over here 
    }
    return 0;
}

###################################################################################

			Way Big BoilerPlateCode for CP 

###################################################################################


vb SieveOfEratosthenes(int n)
{
    vb prime(n+1, true);
 
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    return prime;
}

#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define vi vector<ll>
#define vvi vector<vector<ll>>
#define pb push_back
#define eb emplace_back
#define pii pair<ll, ll>
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define all(x) x.begin(), x.end()
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define repr(i, a, b) for (ll i = a; i >= b; i--)
#define read(a, n) rep(IT, 0, n) cin >> a[IT]
#define print(a, n)                         \
    {                                       \
        rep(IT, 0, n) cout << a[IT] << " "; \
        cout << "\n";                       \
    }
#define ff first
#define ss second
#define yes cout << "YES" \
                 << "\n";
#define no cout << "NO" \
                << "\n";
#define lld long long double
#define ull unsigned long long
#define in insert
#define prec(x) cout << fixed << setprecision(x)
#define bpc(x) __builtin_popcountll(x)

#ifndef ONLINE_JUDGE
#define debug(x)        \
    cerr << #x << ": "; \
    deb(x);             \
    cerr << endl;
#else
#define debug(x)
#endif
void deb(ll t) { cerr << t; }
void deb(string t) { cerr << t; }
void deb(char t) { cerr << t; }
void deb(double t) { cerr << t; }
void deb(ull t) { cerr << t; }

template <class T, class V>
void deb(pair<T, V> p)
{
    cerr << "{";
    deb(p.ff);
    cerr << ",";
    deb(p.ss);
    cerr << "}";
}
template <class T>
void deb(vector<T> v)
{
    cerr << "[ ";
    for (T i : v)
    {
        deb(i);
        cerr << " ";
    }
    cerr << "]";
}
template <class T>
void deb(set<T> v)
{
    cerr << "[ ";
    for (T i : v)
    {
        deb(i);
        cerr << " ";
    }
    cerr << "]";
}
template <class T>
void deb(multiset<T> v)
{
    cerr << "[ ";
    for (T i : v)
    {
        deb(i);
        cerr << " ";
    }
    cerr << "]";
}
template <class T, class V>
void deb(map<T, V> v)
{
    cerr << "[ ";
    for (auto i : v)
    {
        deb(i);
        cerr << " ";
    }
    cerr << "]";
}
/*------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*
Binary search
    ll s=0;e=last,m;
    while(e>=s)
    {
        m=s+(e-s)/2;
        if(m>=tofind)
            e=m-1;
        else
            s=m+1;
    }
    return e;

*/
/*
sieve algorith
    vector<ll> a(1e6 + 1, 0);
    a[1] = 1;
    for (ll i = 2; i  <= 1e6+1; i++)
    {
        if (a[i] != 0)
            continue;
        a[i]=i;
        for (ll j = i * i; j <= 1e6+1; j += i)
            {
                if(a[j] == 0)
                    a[j] = i;
            }
    }

*/
void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
long long binpow(long long a, long long b)
{
    long long res = 1;
    while (b > 0)
    {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}
long long bintodec(string n)
{
    string num = n;
    ll dec_value = 0, base = 1, len = num.length();
    for (ll i = len - 1; i >= 0; i--)
    {
        if (num[i] == '1')
            dec_value += base;
        base = base * 2;
    }
    return dec_value;
}
string DecToBin(ll num)
{
    string str;
    while (num)
    {
        if (num & 1) // 1
            str += '1';
        else // 0
            str += '0';
        num >>= 1; // Right Shift by 1
    }
    reverse(all(str));
    return str;
}
long long int sqt(ll n)
{
    ll s = 0, e = n, m;
    while (e >= s)
    {
        m = s + (s - e) / 2;
        if (m * m > n)
            e = m - 1;
        else
            s = m + 1;
    }
    return e;
}
int modInverse(int A, int M)
{
    int m0 = M;
    int y = 0, x = 1;

    if (M == 1)
        return 0;

    while (A > 1)
    {
        // q is quotient
        int q = A / M;
        int t = M;

        // m is remainder now, process same as
        // Euclid's algo
        M = A % M, A = t;
        t = y;

        // Update y and x
        y = x - q * y;
        x = t;
    }
    // Make x positive
    if (x < 0)
        x += m0;
    return x;
}
/*------------------------------------------------------------------------------------------------------------------------------------------------------------*/

void soln()
{
    fast();
    ll n, k, mod = 1e9 + 7;
    cin >> n >> k;
    vi v(n);
    read(v, n);
    ll c1 = 0;
    rep(i, 0, n)
        c1 += v[i] % 2;

}
int main()
{
    fast();
    ll n = 1;
    cin >> n;
    rep(i, 0, n)
    {
        // cout<<"TEST NO.->" << i+1<<" :";
        soln();
    }
    return 0;
}
###################################################################################

				BoilerPlateCode Ends

###################################################################################


vector<int> decToBin(long long n) {
    // Write your code here.
    vector<int> bin(32,0);


    long long ans = 0;
    int j = 31;
    while(n)
    {
        bin[j--] = (n%2);
        n = n/2;
    }

    return bin;
}


min Heap....
priority_queue <int, vector<int>, greater<int> > pq;

jab bhi circular array ho to usse copy kro and same copy ko end me laga do n--> 2*n sise ho jayega---always in case of circular array
#include <iostream>
#include<bits/stdc++.h>

using namespace std;

int main() {
    int T;
    cin>>T;
    for(int la = 0;la<T;la++)
    {
        int n,y;
        cin>>n>>y;
        for(int i =0;i<n;i++){
            
        }
        if(x+y>6)cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
    }
	// your code goes here
	return 0;
}

###################################################################################

DP question of obstacle in 2d 

int fun(int i, int j,int n,int m,vector< vector< int> > &mat){
    if (i == n - 1 && j == m - 1) {
        return 1;
    }
    if(i>=n || j>=m || mat[i][j]==-1){
        return 0;
    }
    int l = fun(i+1,j,n,m,mat);
    int r = fun(i,j+1,n,m,mat);
    return l+r;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    int limit = 1e9 + 7;
    vector<vector<int>> dp(n,vector<int>(m,0));
    for(int i =0;i<n;i++){
        for(int j =0;j<m;j++){
            if(i==0 && j==0){
                dp[i][j]=1;
            }
            else if(mat[i][j]==-1){
                dp[i][j]=0;
            }
            else{
                int a = 0,b=0;
                if(i>0){
                    a = dp[i-1][j];
                }
                if(j>0){
                    b = dp[i][j-1];
                }
                dp[i][j]=(a+b)%limit;
            }
        }
    }
    return dp[n-1][m-1];
    // return fun(0,0,n,m,mat);
}



###################################################################################

DP ON OPTIMAL GAME STRATEGY

class Solution {
public:
    int fun(int i,int j, vector<int> &nums,vector<vector<int>> &dp){
        if(i>j){
            return 0;
        }
        if(i==j)return nums[i];
        if(dp[i][j]!=-1)return dp[i][j];
        int take_i = nums[i] + min(fun(i+2,j,nums,dp),fun(i+1,j-1,nums,dp));
        int take_j = nums[j] + min(fun(i+1,j-1,nums,dp),fun(i,j-2,nums,dp));
        return dp[i][j] = max(take_i,take_j);
    }
    bool PredictTheWinner(vector<int>& nums) {
        long long sum = 0;
        for(int i =0;i<nums.size();i++){
            sum+=nums[i];
        }
        int n = nums.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        int a = fun(0,n-1,nums,dp);
        if(a>=sum-a)return true;
        return false;
    }
};


###################################################################################

void print(vector<int>array) {
   int size = array.size();
   for(int i = 0; i<size; i++)
      cout << array[i] << " ";
   cout << endl;
}

###############################

2-D for loop print 

void print(vector<vector<int>>array) {
    int n = array.size();
    for (int i = 0; i < n; i++) {
       for (int j = 0; j < n; j++) {
         cout << array[i][j]<<" ";
       }
       cout<<endl;
    }
}
    

###################################################################################


// for loop
for (int i = 0; i < nums.size(); i++) {
  cout << i;
}

// 2-D for loop
for (int i = 0; i < nums.size(); i++) {
  for (int j = 0; j < nums.size(); j++) {
    cout << nums[i][j];
  }
}

//while loop
int i = 0;
while (i <= n) {
  cout << i << " ";
  i++;
}

###################################################################################


//Linear search
int search(int arr[], int n, int x)
{
    int i;
    for (i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}


###############################


// Binary search
int binarySearch(int arr[], int l, int r, int x)
{
    if (l <= r) 
    {
        int mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
        return binarySearch(arr, mid + 1, r, x);
    }
    return -1;
}

###############################


// Iteration -  binary search
int binarySearch(int arr[], int l, int r, int x)
{
    while (l <= r) 
    {
        int m = l + (r - l) / 2;
        if (arr[m] == x)
            return m;
        if (arr[m] < x)
            l = m + 1;
        else
            r = m - 1;
    }
    return -1;
}

###################################################################################


//recursion code with memoization
int cnt=0;
int f(vector<vector<int>> &dp, int i , int j,int n,int m){
    if(i>=n || j>=m)return 0;
    if(i==n-1 || j==m-1){
        cnt++;
        return 1;
    }
    if(dp[i][j]!=-1){cnt++;return dp[i][j];}
    int a,b;
    a =f(dp,i+1,j,n,m);
    b =f(dp,i,j+1,n,m);
    dp[i][j]=a+b;
    return dp[i][j];
}


###################################################################################


//In order Traversal of binary tree
// Recursive Approach
void fun(TreeNode* root, vector<int> &ans){
     if(root==NULL)return;
     fun(root->left,ans);
     ans.push_back(root->val);
     fun(root->right,ans);
 }

###############################

 // without recursion
 void inorderLinear(TreeNode* root, vector<int> &ans){
     stack<TreeNode *> st;
     TreeNode *curr=root;
     while(true){
         if(curr!=NULL){
             st.push(curr);
             curr=curr->left;
         }
         else if(!st.empty()){
             TreeNode *temp = st.top();
             ans.push_back(temp->val);
             st.pop();
             curr=temp->right;
         }
         else if(st.empty())break;
     }
 }


###################################################################################


// Level Order Traversal of Binary Tree (BFS)
vector<vector<int>> levelOrder(TreeNode* root) {
     queue<TreeNode *> q;
     q.push(root); 
     q.push(NULL);
     vector<vector<int>> ans;
     if(root==NULL){return ans;}
     vector<int> temp;
     while(!q.empty()){       
         TreeNode * node=q.front();
         q.pop();
         if(node!=NULL){
             temp.push_back(node->val);
             if(node->left!=NULL){q.push(node->left);}
             if(node->right!=NULL){q.push(node->right);}
         }
         else{
             ans.push_back(temp);
             temp.resize(0);
             if(!q.empty()){q.push(NULL);}
         }
     }
     return ans;
 }


###################################################################################


//(BFS of a GRAPH)
vector<int> bfsOfGraph(int V, vector<int> adj[]) {
     queue<int> q;
     vector<int> ans;
     vector<bool> vis(V,0);
     q.push(0);
     vis[0]=1;
     while(!q.empty()){
         int a = q.front();
         ans.push_back(a);
         q.pop();
         for(auto it:adj[a]){
             if(!vis[it]){
                 vis[it]=1;
                 q.push(it);
             }
         }
     }
     return ans;
 }

###############################

//DFS of A GRAPH 
vector<int> dfsOfGraph(int V, vector<int> adj[]) {
  vector<int> ans;
  vector<bool> vis(V,0);
  dfs(ans,adj,0,vis);
  return ans;
}
void dfs(vector<int> &ans,vector<int> adj[],int root,vector<bool> &vis){
  ans.push_back(root);
  vis[root]=1;
  for(auto it:adj[root]){
      if(!vis[it])
          dfs(ans,adj,it,vis);
  }
}


###################################################################################


No of provinces, bfs graph 1 D
int findCircleNum(vector<vector<int>>& nums) {
  int n = nums.size();
  vector<vector<int>> adj(n);
  for(int i = 0;i<n;i++){
      for(int j =0;j<n;j++){
          if(i!=j && nums[i][j]==1){
              adj[i].push_back(j);
              adj[j].push_back(i);
          }
      }
  }
  int cnt = 0;
  vector<char> vis(n,false);
  queue<int> q;
  for(int i =0;i<n;i++){
      if(!vis[i]){
          q.push(i);
          vis[i]=true;
          while(!q.empty()){
              int a = q.front();
              q.pop();
              for(auto it:adj[a]){
                  if(!vis[it]){
                      q.push(it);
                      vis[it]=true;
                  }
              }
          }
          cnt++;
      }
  }
  return cnt;
}

###################################################################################

No of provinces, bfs graph 2 D
void bfs(int row,int col,vector<vector<int>>&vis,vector<vector<char>>grid){
  int n=grid.size();
  int m=grid[0].size();
  vis[row][col]=1;

  queue<pair<int,int>>q;
  q.push({row,col});
  while(!q.empty()){
      int row=q.front().first;
      int col=q.front().second;
      q.pop();
      // traversing the neighbours of {row,col}.
      for(int delrow=-1;delrow<=1;delrow++){
          for(int delcol=-1;delcol<=1;delcol++){
              if(abs(delrow)+abs(delcol)==2)continue; //continue for diagonal neighbours
              int nrow=row+delrow;
              int ncol=col+delcol;
              if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]=='1'){
                      vis[nrow][ncol]=1;
                      q.push({nrow,ncol});
              }
          }
      }
  }
}
int numIslands(vector<vector<char>>& grid) {
  int n=grid.size();
  int m=grid[0].size();
  int ans=0;
  vector<vector<int>>vis(n,vector<int>(m,0));
  for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
          if(!vis[i][j] && grid[i][j]=='1'){
              bfs(i,j,vis,grid);
              ans++;
          }
      }
  }
  return ans;
}


###################################################################################


// do-while loop
int price = 300;
do {
  std::cout << "Too expensive!";
} while (price > 500);

// for-each loop
int fibonacci[5] = { 0, 1, 1, 2, 3 };
for (auto number:fibonacci){
  std::cout << number;
}
