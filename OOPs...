The major purpose of C++ programming is to introduce the concept of object orientation to the C programming language.

Smalltalk is considered as the first truly object-oriented programming language.

Object means a real word entity such as pen,
Any entity that has state and behavior is known as an object

An object's class acts as its blueprint


Inheritance
When one object acquires all the properties and behaviours of parent object i.e. known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Subclass or Derived Class
 "Base Class" or "Super Class" 
Reusability :existing class already contains some of the code we need, we can generate our new class from the old class thanks to inheritance. This allows us to utilize the fields and methods of the pre-existing class.


Polymorphism
When one task is performed by different ways : Different situations may cause an operation to behave differently


Abstraction
Hiding internal details and showing functionality is known as abstraction.
In C++ nd JAVA, we use abstract class and interface to achieve abstraction.


Encapsulation
Binding (or wrapping) code and data together into a single unit is known as encapsulation


Dynamic Binding - In dynamic binding, a decision is made at runtime regarding the code that will be run in response to a function call. For this, C++ supports virtual functions.

With the use of classes and objects, object-oriented programming makes code maintenance simple. Because inheritance allows for code reuse, the program is simpler because you don't have to write the same code repeatedly. Data hiding is also provided by ideas like encapsulation and abstraction


2 reason for Why is C++ a partial oop?

1 - The main function must always be outside the class in C++ and is required.
2) Global variables are a feature of the C++ programming language that can be accessed by any other object within the program and are defined outside of it. Encapsulation is broken here.

Class doesn't consume any space.
An object contains an address and takes up some space in memory.



Coupling refers to the knowledge or information or dependency of another class. 
You can use interfaces for the weaker coupling because there is no concrete implementation.

Cohesion refers to the level of a component which performs a single well-defined task
java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.

Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are examples of object-based programming languages.



Difference Between Structure and Class in C++
 Members of a class are private by default.	
Members of a structure are public by default. 

Inheritance is possible with classes, and with structures

Acccess Modifiers 

Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.

Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.

Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.

Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.

non-access modifiers, such as static, abstract, synchronized, native, volatile, transient, etc.




Role of Private Constructor
If you make any class constructor private, you cannot create the instance of that class from outside the class.

A class cannot be private or protected except nested class.

The protected access modifier can be applied on the data member, method and constructor. It can't be applied on the class.

class B extends A{  
  public static void main(String args[]){  
   B obj = new B();  
   obj.msg();  
  }  
}


If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.

class A{  
protected void msg(){System.out.println("Hello java");}  
}  
  
public class Simple extends A{  
void msg(){System.out.println("Hello java");}//C.T.Error  
 public static void main(String args[]){  
   Simple obj=new Simple();  
   obj.msg();  
   }  
}  
The default modifier is more restrictive than protected. That is why, there is a compile-time error.

Friend

Java does not have the friend keyword like c++, which is used to access the non-public members

A friend class gets access to private and protected members of another class in which it is declared a friend. When granting access to a class, you need to specify that the access is granted to a class using the 'friend' keyword➡
friend class xclass

The friend declaration can go in a class's private, protected or public section. It does not matter where they appear.
friend function is declared outside a class but can access non-public members of the class, 

A friend function can be:

A global function : friend void friendFunction(base& obj);
A member function of another class : friend void anotherClass::memberFunction(base&);


Scope resolution operator in C++
1) To access a global variable when there is a local variable with same name:
int x; // Global x

int main()
{
int x = 10; // Local x
cout << "Value of global x is " << ::x;
cout << "\nValue of local x is " << x; 
return 0;
}

2) To define a function outside a class.
void A::fun() { cout << "fun() called"; }

3) To access a class’s static variables. 
Test::x = 1;

4) In case of multiple Inheritance: If the same variable name exists in two ancestor classes, we can use scope resolution operator to distinguish. 

class C: public A, public B
< A::x; A and B me dono me X h , and C inherits both A and B
< B::x;

5) Refer to a member of the base class in the derived object:
Derived obj;
    obj.Base::func();
    obj.func();







