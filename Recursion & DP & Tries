................. Recursion ....................

1 - Reverse stack, so isme ye h ki top lo pop kro and then insertAtBottom function call kro
so recursion se stack reverse ho jayegi.

2 - Sort Stack, so isme h ki simply subproblems me todo ki ek ek element hatao and last se sort
chalu kro
and now usme sahi jagah insert kro element 

void insert(stack<int> &st, int x){
    if(st.size()==0 || st.top()<=x){
        st.push(x);
        return;
    }
    int a = st.top();
    st.pop();
    
    insert(st, x);
    st.push(a);
}
void sorting(stack<int> &st){
    if(st.size()==0){
        return;
    }
    
    int x = st.top();
    st.pop();
    
    sorting(st);
    insert(st, x);
}



##################################################
Combination Sum: 
void fun(int idx, int target, vector<int> &nums, vector<int> &temp, vector<vector<int>> &ans){
    if(idx == nums.size()){
        if(target == 0){
            ans.push_back(temp);
        }
        return;
    }

    if(nums[idx]<= target){
        temp.push_back(nums[idx]);
        fun(idx, target-nums[idx], nums, temp, ans);
        temp.pop_back();
    }
    fun(idx + 1,target, nums, temp, ans);
}
vector<vector<int>> combinationSum(vector<int>& nums, int target) {
    vector<vector<int>> ans;
    vector<int> temp;
    fun(0, target, nums, temp, ans);
    return ans;
}

###########################################
Combination Sum 2:
In this we have to avoid duplicates so we increment when we see duplicates 
and 
no need of set in this case...

    void fun(int idx, int n, int sum, vector<int> &temp, vector<int> &nums, vector<vector<int>> &ans){
        if(sum == 0){
            ans.push_back(temp);
            return;
        }

        for(int i = idx; i<n; i++){
            if(i>idx && nums[i] == nums[i-1])continue;
            if(nums[i]>sum)continue;
            temp.push_back(nums[i]);
            fun(i+1, n, sum-nums[i],temp, nums, ans);
            temp.pop_back();
        }

    }
    vector<vector<int>> combinationSum2(vector<int>& nums, int sum) {
        sort(nums.begin(), nums.end());
        vector<int> temp;
        vector<vector<int>> ans;
        int n = nums.size();
        fun(0,n, sum, temp, nums, ans);
        return ans;
    }
};

#############################
Combination Sum 3
void fun(int idx, int target, int k, vector<int> &temp, vector<vector<int>> &ans){
    if(idx == 10){
        if(target == 0){
            if(temp.size() == k)
                ans.push_back(temp);
        }
        return;
    }

    if(idx<=target){
        temp.push_back(idx);
        fun(idx+1, target-idx,k, temp, ans);
        temp.pop_back();
    }
    fun(idx+1, target, k, temp, ans);
}
vector<vector<int>> combinationSum3(int k, int n) {
    vector<vector<int>> ans;
    vector<int> temp;
    fun(1, n, k, temp, ans);
    return ans;
}

ye bhi sahi h, take not take ke jagah aise loop laga ke.

void fun(int idx, int target, int k, vector<int> &temp, vector<vector<int>> &ans){   
    if(target == 0){
        if(temp.size() == k)
            ans.push_back(temp);
        return;
    }

    for(int i = idx; i<=9;i++){
        if(i<=target){
            temp.push_back(i);
            fun(i+1, target-i,k, temp, ans);
            temp.pop_back();
        }
    }
}


#################################
Subset Sum 1
void fun(int idx, int sum, vector<int> &arr, vector<int> &ans){
    if(idx == arr.size()){
        ans.push_back(sum);
        return;
    }
    
    fun(idx + 1, sum, arr, ans);
    fun(idx + 1, sum + arr[idx], arr, ans);
}
vector<int> subsetSums(vector<int> arr, int n) {
    sort(arr.begin(), arr.end());
    vector<int> ans;
    fun(0, 0, arr, ans);
    return ans;
}

isme duplicates nhi the, ab h duplicates
void fun(int idx, int sum, vector<int> &nums, vector<int> &temp, vector<vector<int>> &ans){
    ans.push_back(temp);
    
    for(int i = idx; i<nums.size(); i++){
        if(i>idx && nums[i] == nums[i-1]){
            continue;
        }
        temp.push_back(nums[i]);
        fun(i + 1, sum + nums[i], nums, temp, ans);
        temp.pop_back();
    }
}
vector<vector<int>> subsetsWithDup(vector<int>& nums) { 
    vector<vector<int>> ans;
    vector<int> temp;
    sort(nums.begin(), nums.end());
    fun(0, 0, nums, temp, ans);
    return ans;
}

NOte hm use kr sakte the set and then create vector out of it
but that is not efficient 
so we use ki agar i-1 == i to continue krdo 
but i> idx 



#################
Generate Parenthesis valid ones..
void fun(int n, string s, int o, int c, vector<string> &ans){
    if(o>=n){
        while(c<n){
            s+=')';
            c++;
        }
        cout<<s<<endl;
        ans.push_back(s);
        return;
    }
    
    fun(n, s+'(', o+1, c, ans);
    if(o>c)
    fun(n, s+')', o, c+1, ans);
}
vector<string> generateParenthesis(int n) {
    vector<string> ans;
    fun(n, "(",1, 0, ans);
    return ans;
}

########################
Create Power Set in uniques 
 void fun(int i, int n, vector<int> &nums, vector<int>&temp, vector<vector<int>> &ans){
    if(i==n){
        ans.push_back(temp);
        return;
    }
    temp.push_back(nums[i]);
    fun(i+1, n, nums, temp, ans);
    temp.pop_back();
    fun(i+1, n, nums, temp, ans);
}

############################
Count the number of subset with sum = k 
void fun(int i, int n, int sum, int *nums, int &ans){
   if(i==n){
       if(sum == 0){
           ans++;
       }
       return;
   }
   
   if(nums[i]<=sum)
   fun(i+1, n, sum-nums[i], nums, ans);
   fun(i+1, n, sum, nums, ans);
   
}

##############################
Better String, means ki kiske subsequences jyada honge uniques wale, length same h 

bhut hi acha question h ye....
see dp[0] = 1 means ki {} empty string 
ab as we move we have 2 options, take, and not take isiliye *2 kr rhe h hm 

now map me store krenge ki kaha tha previously encounter vo string
and do store krega yaha tak kitni subsequences h 
to indexing one based h isiliye map me and s me i-1 h 
and dp[idx] h kyuki uss element ke ek peeche wala hi chaiye h count kyuki vhi repeat honge

....nice question....

class Solution {
  public:
    int helper(string s){
        map<char,int> mp;
        int n = s.size();
        vector<int> dp(n+1, 0);
        dp[0] = 1;
        
        for(int i = 1;i<=s.size();i++){
            
            // take and not take h to *2 ho jayega phle se 
            dp[i] = dp[i-1] * 2;
            
            // But agar repeating h to hme uss char tak phuchna h 
            // and uske phle wale ke count ko minus krna h 
            // i-1 because hm i ka mtlb h ki i size subsequence.
            if(mp.find(s[i-1]) != mp.end()){
                int idx = mp[s[i-1]];
                dp[i]-=dp[idx];
            }
            mp[s[i-1]] = i-1;
        }
        return dp[s.size()];
    }
    string betterString(string str1, string str2) {
        // code here
        int a = helper(str1);
        int b = helper(str2);
        if(b>a){
            return str2;
        }
        return str1;
    }
};


################ 
Palindromic Partitioning

void fun(int idx, int n,string s, vector<string> &temp, vector<vector<string>> &ans){

    if(idx >= n){
        ans.push_back(temp);
        return;
    }
    for(int i = idx ; i<n;i++){
        if(isPalin(s.substr(idx, i-idx+1))){
            temp.push_back(s.substr(idx, i-idx+1));
            fun(i+1, n, s, temp, ans);
            temp.pop_back();
        }
    }
}
vector<vector<string>> partition(string s) {
    vector<vector<string>> ans;
    vector<string> temp;
    fun(0, s.size(), s, temp, ans);
    return ans;
}

###############################3
Word Search 

bool fun(int i, int j, int idx, string s, vector<vector<char>>& board){
    int x[] = {1, -1, 0, 0};
    int y[] = {0, 0, -1, 1};
    if(idx == s.size())return true;
    if(i>=board.size() || i<0 || j<0 || j>=board[0].size() || board[i][j]!=s[idx])return false;
    char tt = board[i][j];
    board[i][j] = '*';
    for(int k = 0;k<4;k++){
        bool a = fun(i+x[k], j+y[k], idx+1, s, board);
        if(a)return true;
    }
    board[i][j] = tt;
    return false;
}

bool exist(vector<vector<char>>& board, string word) {
    for(int i = 0;i<board.size();i++){
        for(int j = 0;j<board[0].size();j++){
            if(fun(i,j,0, word, board))return true;
            
        }
    }return false;
}



############################3
N Queen 
 bool isSafe(vector<string> nums, int i,int j){
    int r = i,c = j;
    while(r>=0 && c>=0){
        if(nums[r][c]=='Q')return false;
        r--;
        c--;
    }
    r = i;
    c = j;
    while(r<nums.size() && c>=0){
        if(nums[r][c]=='Q')return false;
        r++;
        c--;
    }
    r = i;
    c = j;
    while(c>=0){
        if(nums[r][c]=='Q')return false;
        c--;
    }
    return true;
}
void fun(int idx,int n,vector<vector<string>> &ans,vector<string> &nums){
    if(idx==n){
        ans.push_back(nums);
        return;
    }
    for(int i = 0;i<n;i++){
        if(isSafe(nums,i,idx)){
            nums[i][idx]='Q';
            fun(idx+1,n,ans,nums);
            nums[i][idx]='.';
        }
    }
}
vector<vector<string>> solveNQueens(int n) {
    vector<string> nums(n,string (n,'.'));
    vector<vector<string>> ans;
    fun(0,n,ans,nums);
    return ans;    
}


#############################
Word Break 
class Solution {
public:
    bool check(int start,int end,string s, vector<string> dict){
        string str = s.substr(start,end-start+1);
        for(auto it:dict){
            if(str==it)return true;
        }
        return false;
    }
    int fun(int start,int end,string s,vector<string> &dict,vector<vector<int>>& dp){
        if(start == s.length() && end==s.length())return 1;
        if(end>=s.length())return 0;
        bool a=0,b = 0;
        if(dp[start][end]!=-1){
            return dp[start][end];
        }
        if(check(start,end,s,dict)){
            a = fun(end+1,end+1,s,dict,dp);
        }
        b = fun(start,end+1,s,dict,dp);
        return dp[start][end]= a|b;

    }
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.length();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return fun(0,0,s,wordDict,dp);
    }
};

####################
M Coloring 

bool fun(int node, int n, int m, vector<vector<int>> &adj, vector<int> &colors){
    
    if(node==n){
        return true;
    }
    
    for(int i = 0;i<m;i++){
        for(auto it:adj[node]){
            if(colors[it] == i){
                continue;
            }
        }
        colors[node] = i;
        bool b = fun(node+1, n, m, adj, colors);
        if(b){
            return true;
        }
        colors[node] = -1;
    }
    return false;
}


bool graphColoring(bool graph[101][101], int m, int n) {
    
    vector<int> colors(n+1, -1);
    vector<vector<int>> adj(n+1);
    for(int i = 0;i<n;i++){
        for(int j = 0;j<n; j++){
            if(graph[i][j] == 1){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }
    return fun(0,n,m,adj,colors);
}

###########################
Sudoko 

 bool checker(vector<vector<char>>& board,int i,int j,char tar){
    for(int r = 0;r<9;r++){
        if(board[i][r]==tar || board[r][j]==tar)return false;
    }
    int r = i/3,c = j/3;
    for(int n =0;n<3;n++){
        for(int m = 0;m<3;m++){
            if(board[n+r*3][m+c*3]==tar)return false;
        }
    }
    return true;
}
bool fun(vector<vector<char>>& board){
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            if(board[i][j]=='.'){
                for(char c = '1';c<='9';c++){
                    if(checker(board,i,j,c)){
                        board[i][j]=c;
                        if(fun(board))
                            return true;
                        else
                            board[i][j]='.';
                    }
                }
                return false;
            }
        }
    }
    return true;
}
void solveSudoku(vector<vector<char>>& board) {
    fun(board);
}

Recursion Done...

......................... TRIES.........................
......................... TRIES.........................
......................... TRIES.........................
......................... TRIES.........................
......................... TRIES.........................

When to use Tries...

Tries helps in major 3 ways
1 - Find whether the given word ke liye exist krti h kya strings jinka prefix given word h
    ex: given word = "hel" and words in tries = help, hello , so it returns true

2 - Check whether exact same string exists or not 

3 - Insert string in trie.

Trie{
2 parameters hote h 
int arr[26]
bool flag 
}

root hoga ek (initially flag false hoga, array are empty)


class Node{
    Node* links[26];
    bool flag;
public:

    Node(){
        flag = false;
        for(int i = 0;i<26;i++){
            links[i] = NULL;
        }
    }
    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }


    void put(char ch, Node* node) {
        links[ch - 'a'] = node;
    }

    Node* get(char ch) {
        return links[ch - 'a'];
    }

    void setEnd() {
        flag = true;
    }

    bool isEnd() {
        return flag;
    }
};
class Trie {
private:
    Node* root;
public:

    Trie() {
        root = new Node();
    }
    
    void insert(string word) {
        Node* node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                node->put(word[i], new Node());
            }
            node = node->get(word[i]);
        }
        node->setEnd();
    }
    
    bool search(string word) {
        Node* node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                return false;
            }
            node = node->get(word[i]);
        }
        return node->isEnd();
    }
    
    bool startsWith(string prefix) {
        Node* node = root;
        for (int i = 0; i < prefix.length(); i++) {
            if (!node->containsKey(prefix[i])) {
                return false;
            }
            node = node->get(prefix[i]);
        }
        return true;
    }
};


####################### TRIE 2 With count prefix and ends with ###############################

isme hmne flag ke jagah 2 int rakhe h 
count prsfix mtlb abhi tak iss node se start hone wale kitne h 
ends with mtlb iss node pe kon konse end ho rhe h

RULES :
1 - Insert me harr node pe count Prefix increase hoga but bass last ne endswith increase hoga
2 - Count Words equal to, so isme iterate kro and agr last wale ka endswith return krdo
3 - Count Words prefix wale, so isme last wale ka coutnPrefix krdo return 
4 - Erase me simply count resuce krte rho and last wale me endsWith bhi reduce krdo 


#include <bits/stdc++.h>
class Node{

private:
    int endsWith;
    int countPrefix;
    Node *links[26];

public:
    Node(){
        endsWith = 0;
        countPrefix = 0;
        for(int i = 0;i<26;i++){
            links[i] = NULL;
        }
    }

    void createNode(char ch, Node *newN){
        links[ch-'a'] = newN;
    }
    
    bool charExist(char ch){
        return links[ch-'a']!=NULL;
    }

    void increaseCP(){
        countPrefix++;
    }

    Node *getCharNode(char ch){
        return links[ch-'a'];
    }

    void increseEW(){
        endsWith++;
    }
    
    int getEndsWith(){
        return endsWith;
    }

    int getCountPrefix(){
        return countPrefix;
    }

    void reduceCountPrefix(){
        countPrefix--;
    }

    void reduceEndsWith(){
        endsWith--;
    }
};
class Trie {

Node* root;
public:
  Trie() {
    root = new Node();
  }

  void insert(string &word) {
    Node * node = root;
    for(int i = 0;i<word.size(); i++){
        if(!node->charExist(word[i])){
            node->createNode(word[i], new Node());
        }
        node = node->getCharNode(word[i]);
        node->increaseCP();
    }
    node->increseEW();
  }

  int countWordsEqualTo(string &word) {
    Node * node = root;
    for(int i = 0;i<word.size(); i++){
        if(!node->charExist(word[i])){
            return 0;
        }
        node = node->getCharNode(word[i]);
    }
    return node->getEndsWith();
  }

  int countWordsStartingWith(string &word) {
    Node * node = root;
    for(int i = 0;i<word.size(); i++){
        if(!node->charExist(word[i])){
            return 0;
        }
        node = node->getCharNode(word[i]);
    }
    return node->getCountPrefix();
  }

  void erase(string &word) {
    Node * node = root;
    for(int i = 0;i<word.size(); i++){
        if(node->charExist(word[i])){
            node = node->getCharNode(word[i]);
            node->reduceCountPrefix();
        }
    }
    node->reduceEndsWith();
  }
};


############## Ques 1 : Complete String ###############################

isme krna h ki ek string find krni h jiski saari substrings ho hamre pass array me 

so phle saari strings ko add kro apne trie me 
ab start kro iterate krna again , now agar meri iterate krte hue vo character ka node nhi h 
mtlb h ki vo phle nhi mila h to return krdo false
and agar uss node ka flag = false h mtlb yaha ki substring nhi mili h to bhi false krdo return 

to aise krke max length wala le lo... 



class Node{
public:
    Node *links[26];
    bool flag;

    Node(){
        flag = false;
        for(int i =0;i<26;i++){
            links[i] = NULL;
        }
    }

    bool charExists(char ch){
        return links[ch-'a']!=NULL;
    }

    void createNode(char ch, Node *node){
        links[ch-'a'] = node;
    }

    Node *getCharNode(char ch){
        return links[ch-'a'];
    }
};

class Trie{
    Node *root;

public:
    Trie(){
        root = new Node();
    }

    void insertInTrie(string word){
        Node *node = root;
        for(int i = 0;i<word.size(); i++){
            if(!node->charExists(word[i])){
                node->createNode(word[i], new Node());
            }
            node = node->getCharNode(word[i]);
        }
        node->flag = true;
    }

    bool isPresentPrefix(string word){
        Node *node  = root;
        for(int i = 0;i<word.size(); i++){
            if(!node->charExists(word[i])){
                return false;
            }
            node = node->getCharNode(word[i]);
            if(!node->flag){
                return false;
            }
        }
        return node->flag;
    }
};

string completeString(int n, vector<string> &a){
    // Write your code here.
    Trie *obj = new Trie();

    int len = 0;
    string ans = "";
    for(auto it:a){
        obj->insertInTrie(it);
    }

    for(auto it:a){
        int currLen = it.size();
        if(currLen>=ans.size()){
            bool isP = obj->isPresentPrefix(it);
            if(isP){
                if(ans==""){
                    ans = it;
                }
                else{
                    if(it.size()>ans.size()){
                        ans = it;
                    }
                    if(it.size() == ans.size() && it<ans){
                        ans = it;
                    }
                }
            }
        }
    }
    if(ans == "")return "None";
    return ans;
}


######################## Ques 2 ; Count distinct substrings ###########################

isme kya h ki agar hm set use krte to usme approx N*N*N ki sc jaati 
and N*N* log set size jaati 

so, isme 
int countDistinctSubstrings(string &s) {
    int i = 0;
    int N = s.size();
    Node *root = new Node();

    int ans =1;
    while(i<N){
        Node *node = root;
        int j = i;
        while(j<N){
            if(!node->hasChar(s[j])){
                ans +=1;
                node->createNode(s[j],new Node());
            }
            node = node->get(s[j]);
            j++;
        }
        i++;
    }
    return ans;
}




######################## Trie on BITS... #############################

isme kya h ki hm 2 lete h size links ka
0 and 1 
and 32 size starting from MSB start krte h 
and insert me jo bhi set h bit uss hisab se nodes banate h 
and ek h check ka ki xor krna h to uske dusri bit h to udhar jao 
and ans me | krte jao


class Node{
    Node *links[2];

public:
    Node(){
        links[0] = NULL;
        links[1] = NULL;
    }

    bool bitExist(int f){
        return (links[f]!=NULL);
    }

    void createNode(int f, Node* node){
        links[f] = node;
    }

    Node* get(int f){
        return links[f];
    }
};

class Trie{
    Node *root;

public:
    Trie(){
        root = new Node();
    }

    void insert(int num){
        Node *node = root;
        for(int i = 31;i>=0;i--){
            int bit = (num>>i) & 1;

            if(!node->bitExist(bit)){
                node->createNode(bit, new Node);
            }
            node = node->get(bit);
        }
    }

    int check(int num){
        int ans = 0;
        Node *node = root;
        for(int i = 31;i>=0;i--)
        {
            int bit = ((num>>i) & 1);
            if(node->bitExist(1-bit)){
                ans = ans | (1<<i);
                node = node->get(1-bit);
            }
            else{
                node = node->get(bit);
            }
        }
        return ans;
    }
    
};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        Trie *obj = new Trie();
        for(int i = 0;i<n;i++){
            obj->insert(nums[i]);
        }
        int ans = 0;
        for(int i = 0;i<n;i++){
            ans = max(ans, obj->check(nums[i]));
        }

        return ans;
    }
};


next ques tha ki quesries h xi xor krna h maximise krne ke liye but ekements m se bade nhi hone chaoiye h 

to OFFLINE queries ka concept lagao
means ki phle aane wale limit se sort krdo and index bhi le lo 
phir existing trie me search krlo max XOR and agle baar insert krlo nexr limit se chote elemnts 



struct offlineQueries{
    int val;
    int limit;
    int idx;
    offlineQueries(int a, int b, int c){
        val = a;
        limit = b;
        idx = c;
    }
};

class Solution {
public:
    static bool comp(offlineQueries &q1, offlineQueries &q2){
        return q1.limit<q2.limit;
    }
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        sort(nums.begin(),nums.end());

        int q = queries.size();
        int n = nums.size();

        vector<offlineQueries> of;
        // Q
        for(int i = 0;i<q;i++){
            offlineQueries newOF = offlineQueries(queries[i][0], queries[i][1], i);
            of.push_back(newOF);
        }

        // QlogQ
        sort(of.begin(), of.end(), comp);

        Trie obj;
        vector<int> ans(q,0);
        int i = 0;
        int j = 0;
        // Q*32 + N*32 
        while(j<q){
            int limit = of[j].limit;
            int toXor = of[j].val;
            int idx = of[j].idx;
            while(i<n && nums[i]<=limit){
                obj.insert(nums[i]);
                i++;
            }
            if(i == 0){
                ans[idx] = -1;
            }
            else{
                ans[idx] = obj.check(toXor);
            }
            j++;
        }

        return ans;
    }
};
