Arrays....
Kadane algo me longest subarray me maximise sum with negative val krna hota h 
to usme ye hota h ki jab bhi sum <0 ho jaye to sum = 0 krdo 


For Rotating Elements to left
Step 1: Reverse the first k elements of the array

Step 2: Reverse the last n-k elements of the array.

Step 3: Reverse the whole array.



zeroes to end 

First, using a loop, we will place the pointer j. If we don’t find any 0, we will not perform the following steps.
After that, we will point i to index j+1 and start moving the pointer using a loop.
While moving the pointer i, we will do the following:
If a[i] != 0 i.e. a[i] is a non-zero element: We will swap a[i] and a[j]. Now, the current j is pointing to the non-zero element a[i]. So, we will shift the pointer j by 1 so that it can again point to the first zero.
Finally, our array will be set in the right manner.

#####################################################

Longest subarray ones.... 
Algorithm / Intuition

The steps are as follows:
NlogN
First, we will declare a map to store the prefix sums and their counts.
Then, we will set the value of 0 as 1 on the map.
Then we will run a loop(say i) from index 0 to n-1(n = size of the array).
For each index i, we will do the following:
We will add the current element i.e. arr[i] to the prefix sum.
We will calculate the prefix sum i.e. x-k, for which we need the occurrence.
We will add the occurrence of the prefix sum x-k i.e. mpp[x-k] to our answer.
Then we will store the current prefix sum in the map increasing its occurrence by 1.

for (int i = 0; i < n; i++) {
        //calculate the prefix sum till index i:
        sum += a[i];

        // if the sum = k, update the maxLen:
        if (sum == k) {
            maxLen = max(maxLen, i + 1);
        }

        // calculate the sum of remaining part i.e. x-k:
        long long rem = sum - k;

        //Calculate the length and update maxLen:
        if (preSumMap.find(rem) != preSumMap.end()) {
            int len = i - preSumMap[rem];
            maxLen = max(maxLen, len);
        }

        //Finally, update the map checking the conditions:
        if (preSumMap.find(sum) == preSumMap.end()) {
            preSumMap[sum] = i;
        }
    }

sliding window se krenge jab positives h , negative and zero mefail ho jayegi ye technique..
####################################################
Dutch National flag algorithm. 
arr[0….low-1] contains 0. [Extreme left part]
arr[low….mid-1] contains 1.
arr[high+1….n-1] contains 2. [Extreme right part], n = size of the array

int low = 0, mid = 0, high = n - 1; // 3 pointers

    while (mid <= high) {
        if (arr[mid] == 0) {
            swap(arr[low], arr[mid]);
            low++;
            mid++;
        }
        else if (arr[mid] == 1) {
            mid++;
        }
        else {
            swap(arr[mid], arr[high]);
            high--;
	    // Yaha mid ko increment nhi krna ye imp h
        }
    }
######################################  

next permutation 

vhi h ki 8431 ye decresaing h to sahi h jaha break ho vo ppivot lo
and dobara piche se dekho jaha bada ho swap kr do and pivot+1 se end tak reverse kr do 

next_permutation(arr.begin(), arr.end()) se bhi aa jayega

####################################

Longest consecutive in unsorted array: 
mtlb ki 1 2 3 4 ye ek consecutive h, order doesnot matter 
Brute : N^2 me chalo and ek element uthao and jab tak elem+1 nhi h tab tak chalo 
Better sot krke count krlo jab tak +1 ho raha h
Optimal: Isme set use kro and sabko daal do set me amd iterate kro
agar elem-1 present h to continue: else while me +1 krke search 

vrna map me mp[prev} + 1 + mp[next] krdo 
and insert krte chalo.

######################################  

Set Matrix zero. yhi ki 0 h to uski row and col = 0 krdo
so simply phle to 2D me 0 walo ko store krlo and chalo n*m me and agar uss row ya col m 0 h 
to 0 krdo nhi to same => O((NM)(N+M)), SC : O(N*M).
Solved using Matrix with Extra space. TC : O((NM)(N+M)), SC : O(N*M).
Solved using Matrix with Constant space. TC : O((NM)(N+M)), SC : O(1).
Solved using Array + Hash Table (Unordered set). TC : O(N*M), SC : O(N+M).
Solved using Matrix with Constant space. Optimized Approaches. TC : O(N*M), SC : O(1).

1 = for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == 0){
                    for(int k=0; k<m; k++){
                        visited[i][k] = 0;
                    }
		    // Similary column bhi krdo 0 
                }
            }
        }

First, we will use two loops(nested loops) to traverse all the cells of the matrix.
If any cell (i,j) contains the value 0, we will mark all cells in row i and column j with -1 except those which contain 0.
We will perform step 2 for every cell containing 0.
Finally, we will mark all the cells containing -1 with 0.
Thus the given matrix will be modified according to the question.

2 = for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j] == 0){
                    for(int k=0; k<m; k++){
                        if(matrix[i][k] != 0){
                            matrix[i][k] = -9999;
                        }
                    }
                }
            }
        } ab baad me 0 krdo inn 9999 walo ko

Approach (Using two extra arrays):

The steps are as follows:

First, we will declare two arrays: a row array of size N and a col array of size M and both are initialized with 0.
Then, we will use two loops(nested loops) to traverse all the cells of the matrix.
If any cell (i,j) contains the value 0, we will mark ith index of row array i.e. row[i] and jth index of col array col[j] as 1. It signifies that all the elements in the ith row and jth column will be 0 in the final matrix.
We will perform step 3 for every cell containing 0.
Finally, we will again traverse the entire matrix and we will put 0 into all the cells (i, j) for which either row[i] or col[j] is marked as 1.
Thus we will get our final matrix.

Optimal: 
First, we will traverse the matrix and mark the proper cells of 1st row and 1st column with 0 accordingly. The marking will be like this: if cell(i, j) contains 0, we will mark the i-th row i.e. matrix[i][0] with 0 and we will mark j-th column i.e. matrix[0][j] with 0.
If i is 0, we will mark matrix[0][0] with 0 but if j is 0, we will mark the col0 variable with 0 instead of marking matrix[0][0] again.

After step 1 is completed, we will modify the cells from (1,1) to (n-1, m-1) using the values from the 1st row, 1st column, and col0 variable.
We will not modify the 1st row and 1st column of the matrix here as the modification of the rest of the matrix(i.e. From (1,1) to (n-1, m-1)) is dependent on that row and column.

Finally, we will change the 1st row and column using the values from matrix[0][0] and col0 variable. Here also we will change the row first and then the column.
If matrix[0][0] = 0, we will change all the elements from the cell (0,1) to (0, m-1), to 0.
If col0 = 0, we will change all the elements from the cell (0,0) to (n-1, 0), to 0

vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {

    // int row[n] = {0}; --> matrix[..][0]
    // int col[m] = {0}; --> matrix[0][..]

    int col0 = 1;
    // step 1: Traverse the matrix and
    // mark 1st row & col accordingly:
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == 0) {
                // mark i-th row:
                matrix[i][0] = 0;

                // mark j-th column:
                if (j != 0)
                    matrix[0][j] = 0;
                else
                    col0 = 0;
            }
        }
    }

    // Step 2: Mark with 0 from (1,1) to (n-1, m-1):
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            if (matrix[i][j] != 0) {
                // check for col & row:
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }
    }

    //step 3: Finally mark the 1st col & then 1st row:
    if (matrix[0][0] == 0) {
        for (int j = 0; j < m; j++) {
            matrix[0][j] = 0;
        }
    }
    if (col0 == 0) {
        for (int i = 0; i < n; i++) {
            matrix[i][0] = 0;
        }
    }

    return matrix;
}

######################################  
Rotate Image b y 90 Degree
1-> Approach: Take another dummy matrix of n*n, and then take the first row of the matrix
and put it in the last column of the dummy matrix, take the second row of the matrix, and 
put it in the second last column of the matrix and so.
rotated[j][n - i - 1] = matrix[i][j];

2-> we transpose the matrix and then reverse each row,
//transposing the matrix
    for (int i = 0; i < n; i++) {
    for (int j = 0; j < i; j++) {
        swap(matrix[i][j], matrix[j][i]);
    }
    }
    //reversing each row of the matrix
    for (int i = 0; i < n; i++) {
    reverse(matrix[i].begin(), matrix[i].end());
    }

######################################  
Spiral print of array :
isme left, right, top bottom pointers le lo 
and 4 loop laga ke krdo print...

int top = 0, left = 0, bottom = n - 1, right = m - 1;
while (top <= bottom && left <= right) {
	for (int i = left; i <= right; i++) top++
	for (int i = top; i <= bottom; i++) right--;
	if (top <= bottom) {
		for (int i = right; i >= left; i--) bottom--;
	if (left <= right)
		for (int i = bottom; i >= top; i--) left++;

######################################  

Next permutation 
1 - sare banao permutation 

2 - C++ provides an in-built function called next_permutation() which directly returns the 
lexicographically next greater permutation of the input.

3 - 3241 h to next hoga 3412, ab isme ye h ki 32 (41) ye 41 decreasing me tha 
to find peeche se chalo and i-1<i h ojaye to break
now jo next elem hoga vo uss waqt max hoga to ab jo pivot h vo max elem ban jayega 
and baaki array reverse krdo aage ki and add that number 

 for (int i = n - 2; i >= 0; i--) {
        if (A[i] < A[i + 1]) {
            // index i is the break point
            ind = i;
            break;
        }
    }

    // If break point does not exist:
    if (ind == -1) {
        // reverse the whole array:
        reverse(A.begin(), A.end());
        return A;
    }

    // Step 2: Find the next greater element
    //         and swap it with arr[ind]:

    for (int i = n - 1; i > ind; i--) {
        if (A[i] > A[ind]) {
            swap(A[i], A[ind]);
            break;
        }
    }

    // Step 3: reverse the right half:
    reverse(A.begin() + ind + 1, A.end());

######################################  
Negative and pos ko alag kro 
int posIndex = 0, negIndex = 1;
  for(int i = 0;i<n;i++){ 
      // Fill negative elements in odd indices and inc by 2.
      if(A[i]<0){
          ans[negIndex] = A[i];
          negIndex+=2;
      }
      // Fill positive elements in even indices and inc by 2.
      else{
          ans[posIndex] = A[i];
          posIndex+=2;
      }
	}

Alternative pw 
0-pos 1 - neg 2 - pos 3 - neg.. 
######################################33





....................... BINARY SEARCH............................






Simple BS 
Lower Bound : Vo elem jo X se just chota h ya X h, so chote wale me ans = mid krdo
Upper Bound : Vo elem jo X se just bada h ya X h, bade wale case me and = mid krdo 



Ek acha ques,,,, Ki negative  and 0 ho sakte h to longest subarray with sum k 

so isme hm ye use krenge ki ek array h to uss last elem tak kitna sum h 
to agar sum == k h ya sum-k phle exist krta h to vo ans ho jayega...
important.. ki 0 ki vajah se hm isme sum agar nhi h map me to hi insert krenge 
1 0 0 3, k= 2 h to map me sum =1 , idx = 0, 1, 2 pe push hoga, but we want max length so
we will update only on 0th index

TC + NlogN
int lenOfLongSubarr(int nums[],  int n, int k) 
    { 
        // Complete the function
        map<int,int> mp;
        int ans = 0;
        int sum = 0;
        for(int i =0;i<n;i++){
            
            sum+=nums[i];
            if(sum==k){
                ans = max(ans,i+1);
            }
            if(mp.find(sum-k)!=mp.end()){
                ans = max(ans, i - mp[sum-k] );
            }
            if(mp.find(sum)==mp.end()){
                mp[sum] = i;
            }
        }
        return ans;
    }

agr positive hota to simply Sliding window hota optimal 
but for negaitves upar wala is optimal....

################## Find the first and last occuracnce of element in array ####################
So we implement lowerbound
  and we sbtract for x+1 wala lower bound 
nice...

class Solution {
private:
    int lower_bound(vector<int>& nums, int low, int high, int target){
        while(low <= high){
            int mid = (low + high) >> 1;
            if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return low;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int low = 0, high = nums.size()-1;
        int startingPosition = lower_bound(nums, low, high, target);
        int endingPosition = lower_bound(nums, low, high, target + 1) - 1;
        if(startingPosition < nums.size() && nums[startingPosition] == target){
            return {startingPosition, endingPosition};
        }
        return {-1, -1};
    }
};


#############################################################################################
############################################################################################
############################# Rotation Based question on sorted array ######################

Search in Rotated : 

class Solution {
public:
    int search(std::vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            if (nums[low] <= nums[mid]) {
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        return -1;
    }
};

########## Search in rotated 2 (Having Duplicates) ##########################

bool search(vector<int>& nums, int target) {
		int n = nums.size();
		int l = 0, r = n-1;
		while(l<=r){
				int mid = l + (r-l)/2;
				if(nums[mid] == target)return true;
				if(nums[l]==nums[mid]&& nums[mid]==nums[r]) {
						l++;
						r--;
						continue;
				}
				if(nums[mid]>=nums[l]){
						// Sorted is left...
						if(target<=nums[mid] && target>=nums[l]){
								r = mid - 1;
						}
						else{
								l = mid+1;
						}
				}
				else{
						// Sorted is right...
						if(target>=nums[mid] && target<=nums[r]){
								l = mid + 1;
						}
						else{
								r = mid-1;
						}
				}
		}
		return false;
}

//// isme jab mid and low and high equal h to hm decide nhi kr payenge ki kaha jaana h to uss case me l++, r-- krdo baki same h


############################## Finding Peak Element ##########################################

int findPeakElement(vector<int>& nums) {
        int start = nums[0];
        int l = 0, r = nums.size()-1;
        int n = nums.size();
        while(l<r){ // Boundarys ko consider krne ke liye
            int mid = (l+r)/2;
            if(nums[mid]<nums[mid+1]){
                l = mid+1; // kyuki mid to chota h to ye ans nhi ho sakta
            }
            else{
                r = mid; // mid bada h to ye and ho sakta h isiliye MID pe raho
            }
        }
        return l;
        
    }

Finding Peak in 2D arrat
Brute : scan each elem and check for 4 nighbour : n*m*4  => worst case
so we can only optimiset the worst case scenario... 

Better : find the largest one = m*n for best, avg 

BS me skip krenge kuch part ko 


left bada h mid se left me peak hoga
right bada h mid se to right me peak hoga 
aur agr mid bada h left and right se to vo ans h

vector<int> findPeakGrid(vector<vector<int>>& nums) {
		int l = 0;
		int r = nums.size()-1;
		int n = nums.size();

		while(l<=r){
				int mid = (l+r)/2;
				int maxIdx = findMax(nums[mid]);
				int left = mid-1>=0?nums[mid-1][maxIdx]:-1;
				int right = mid+1<n?nums[mid+1][maxIdx]:-1;
				int curr = nums[mid][maxIdx];
				if(curr>left && curr>right)return {mid, maxIdx};
				else if(curr<left){
						r = mid-1;
				}
				else{
						l = mid + 1;
				}
		}
		return {-1,-1};
}

############################## Minimum in rotated sorted array ############################
imp baat, l < r tak chalo 
2 - mid and end ko compare kro 

int findMin(vector<int>& nums) {
        int left = 0;
        int right = nums.size()-1;
        while(left<right){
            int m = (right+left)/2;
            if(nums[m]<nums[right]){
                right=m;
            }
            else{
                left = m+1;
            }
        }
        return nums[left];
    }


#######################............BS ON ANSWERSS...........###################################
isme ye h ki -1 and N index = -INF so vo bhi ans me ho sakte h, aur mutliple Peak ho sakte h
to kahi bhi converge kro 
################ This is the Pattern for BS on answers ########################################

See isme kya identification h : Maximise the minimum OR Minimise the maximum 

This ques is similar to 
1 - Book allocation, ki array h to subarray le sakte h 
    and k students ko allot krna h such that sum is minimum unke beech me 

2 - Split Array Largest sum, so isme subarray lena h (k subarrays) such that sum jo ho subarray
    ka , unka jo maximum ho na, vo minimise ho sake
    so maximum sum ho sakta h sum of all elem, minimum hoga, mini element, so ye range ho gyi
    ab x sum minimum h to k ya k se jyada split wale subarray such that unka sum <= x h 
    to vo valid h 

3  - Capacity to ship package within D days, isme bhi subarray and sum h to ye bhi same h. isme 
    bhi  minimum wieght chaiye h 

4 - Painter's Partition Problem ye bhi same h ki ek number of painters h , 
    and nums[I] time h kitna lega ek painting ko ek paineter
    contiguous hi kr sakte h, to batao ki kitna minimum time lagega K painters ko... same....

5 - Minimum Number of Days to Make m Bouquets, ye bhi same h isme m boquet bano consecutive 
    flowers see , and minimum days chaiye h , days diye h array me 


bool helper(vector<int> &nums , int val, int days){
    int temp = val;
    int n = nums.size();
    int i = 0;
    while(i<n)
    {
        temp= val;
        if(nums[i]<=temp){
            while(i<n && nums[i]<=temp){
                temp-=nums[i];
                i++;
            }
            days--;
        }
        else{
            return false;
        }
    }
    
    return days>=0;
}
int splitArray(vector<int>& nums, int k) {
    int maxi = 0;
    for(auto it:nums){
        maxi+=it;
    }
    int l = 0;
    int r = maxi;

    while(l<=r){
        int mid = l + (r-l)/2;
        bool a = helper(nums, mid, k);
        cout<<mid<<" "<<a<<endl;
        if(a)
        {
            r = mid-1;
        }
        else{
            l = mid+1;
        }
    }
    return l;
}


######################### Aggressive Cow ##################################

bool checkCows(vector<int>&stalls,int mid,int Givencows){
	int cows=1;
	int lastPos=stalls[0];

	for(int i=1;i<stalls.size();i++){
		if(stalls[i]-lastPos>=mid){
			cows++;
			lastPos=stalls[i];	
		}
	}
	if(cows>=Givencows){
				return true;
	}
	return false;
}

int aggressiveCows(vector<int> &stalls, int k)
{
   int n=stalls.size();
	sort(stalls.begin(),stalls.end());// first we sort the array
	int l=0;
	int h=stalls[n-1]-stalls[0];// maximum element - minimum element this is max smallest distace we can take
	int res=-1;
	while(l<=h){
		int mid=l+(h-l)/2;
		if(checkCows(stalls,mid,k)){// if we are able to place k cows in mid distance
			res=mid;// store the answer
			l=mid+1;// check for max distance in the right 
		}
		else{
			h=mid-1;
		}
	}
	return res;
}



##################################### BS Median of 2 sorted ARRAYS ###########################

Brute too vhi h merge krdo and median nikal do , isme bhi space use krne ki jarurat nhi h 
simply 2 vaiable me store krlo jab len n.2 ho jaye

Optimal: dekho isme aisa dekho ki array one pe chalo ki usme se kitne uthane h elements 
to n1+n2+1/2 elements automatically nums2 me se uth jayenge 
now agar l1 < u2 and l2< u1 to sahi h mtlb ki sorted h to answer return kr do

but agar l1 > u2 se mtlb l1 ke jyada le liye elements to r = mid-1 krdo nhi to l = mid+1 kdo
bass isme thoda l1, l2, u1, u2 ko lene me if else laga do

also imp ki r = n1 h, na ki r = n1-1 bcz n1 ka mtlb h saare lena nums1 ke 
NICE QUESTION...

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		int n1 = nums1.size();
		int n2 = nums2.size();

		if(n1>n2){
				return findMedianSortedArrays(nums2, nums1);
		}
		int n = n1+n2+1;
		int rem = n/2;

		int l = 0;
		int r = n1;

		while(l<=r){
				int mid = l + (r-l)/2;
				int mid2 = rem - mid;

				int l1 = mid-1>=0?nums1[mid-1]:-1e9;
				int u1 = mid<n1?nums1[mid]:1e9;

				int l2 = mid2-1>=0?nums2[mid2-1]:-1e9;
				int u2 = mid2<n2?nums2[mid2]:1e9;

				if(l1<=u2 && l2<=u1){
						int m1 = max(l1,l2);
						int m2 = min(u1,u2);
						if(n%2==1){
								return double(m1+m2)/2.0;
						}
						else{
								return m1;
						}
				}
				else if(l2>u1){
						l = mid + 1;
				}
				else{
						r = mid-1;
				}
		}
		return -1;
}
 both ki 
TC : log of min(n1,n2);
Iska extensaion h Kth number in 2 sorted array 
so isme e imp baat h ki low = max(0, k-n2) and high = min(n1, k) becoz 
5 6 h n1, n2 and  k = 8 h to atleast 2 to lena hi padega nums1 me se .....
baki sab same h 

##### Median in 2d row wise sorted array #############

To isme hme krna h ki aisa element dhundhna h jiska <= wala count >=n/2 ho
basically count ke liye to upper bound use kr lia and BS laga dia mini se maxi pe 
int smallerElement(vector<vector<int>> &nums, int mid, int R){
        int ans = 0;
        for(int i = 0;i<R;i++){
            ans+= upper_bound(nums[i].begin(), nums[i].end(), mid)-nums[i].begin();
        }
        return ans;
    }
    int median(vector<vector<int>> &nums, int R, int C){
        int l = 1e9;
        int r = -1e9;
        for(int i = 0;i<R;i++){
            l = min(l, nums[i][0]);
            r = max(r, nums[i][C-1]);
        }
        
        while(l<=r)
        {
            int mid = l + (r-l)/2;
            int se = smallerElement(nums, mid, R);
            if(se>(R*C)/2){
                r = mid-1;
            }
            else{
                l = mid+1;
            }
        }
        return l;
    }
###################################### BS ON 2D arrays #####################################################

################### Row with max 1s

	ye interesting ques h as isme phle sorted h on each list, so hme max no of ones ka count batana h 
	now ism brute ho gy i n*m ki
	better ho gyi  nLogm
	best ho gyi n+m jo ki start kro topright see, 
	and vah se neeche chalo agr 0 aa gya to neeche, 1 h to left and left jate hue idx = i krdo


int bs(vector<int> &nums, int l, int r){
        int ans = nums.size();
        while(l<=r){
            int mid = l + (r-l)/2;
            if(nums[mid]==1){
                ans = mid;
                r = mid-1;
            }
            else{
                l = mid+1;
            }
        }
        return ans;
    }
    int rowWithMax1s(vector<vector<int> > arr) {
        // code here
        int n = arr.size();
        int m = arr[0].size();
        int l = 0;
        int r = m-1;
        int ans = m;
        int idx = -1;
        // for(int i = 0;i<n;i++){
        //     int mini = bs(arr[i], l,r);
        //     // cout<<mini<<" ";
        //     if(mini<ans){
        //         idx = i;
        //         ans = mini;
        //     }
        //     r = ans;
        // }
        // return idx;
        while(l<n && r>=0){
            if(arr[l][r]==1){
                r--;
                idx = l;
            }
            else{
                l++;
            }
        }
        return idx;        
    }


################# Search in 2D matrix ##########################3
ye case h ki element in next row is graeter then last element o previous row , tabhi hm vo log(n*m ) wala laga sakteh 

Brute is O(n*m)

Better is (n + logM) - harr row me jao and see if starting and ending ke beech me h target agar h 
to BS lagado uss row me
else neeche chalte rho 

Better : O(n + m) start from top right element, and start from there and if elem is greater than the curr elem then go to left
else go down, so n + m chalenge 

Best: O(log(n*m)) : to isme assume ki n*m ki flatten h to simplt BS lagao ,and row = mid/cols , col = mid%ccols

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();

        int start = 0;
        // because we are thinking it as linear array (sorted already)
        int end = (row*col) - 1;
        int mid = start + (end - start)/2;
        while(start <= end){
            int element = matrix[mid / col][mid % col];
            if(element == target){
                return true;
            }
            if(element < target){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
            mid = start + (end - start)/2;
        }
        return false;
    }



################## Search in 2d part 2 ##########################

Better : isme n + log m nhi lagega kyuki multiple rows ho sakti h jisme vo lie kre
		so n * log m hoga better solution 
Best : isme column wise and row wise sorted h to o(n+m) 

bool searchMatrix(vector<vector<int>>& nums, int target) {
        int n = nums.size(), m = nums[0].size();
        int i = 0, j = m-1;

        while(i<n && j>=0){
            if(nums[i][j] == target){
                return true;
            }
            else if(nums[i][j]>target){
                j--;
            }
            else{
                i++;
            }
        }
        return false;
    }

.......................................BS DONE........................................
