DAY _ 1 (11-09-2023)

Question: 1 - Why do we use MOD 1e9+7?
Answer 1: 
  When we have large numbers this might lead to overflow in integer.
  Addition : (a+b) mod M = (a % M + b % M) % M
  Subtraction: (a-b) % M = (a % M - b % M) % M 
  Multiplication: (a*b) % M = (a % M * b % M) % M
  Division: (a/b) % M = (a % M * b^-1 % M) % M
  NOTE THAT: It is different from others. It might not exist. (Modular Multiplicative Inverse)
  means a.a^-1 % M = 1 . If M is prime (True in our case) then a^(M-2) % M  = a % M
  int M = 1e9 + 7;
  Why 1e9 + 7 
  because this is a signed 32-bit integer. It is also the first 10-digit prime number.
  Any prime number less than 2^30 will be fine to prevent possible overflows. But this one can be easily written as 1e9+7.


DAY _ 2 (12-09-2023)

Question: 2 - What is the difference between the ordered and unordered maps?
Answer 2: 
  Map : 
  ordering: Increasing order of key (Default)
  Implementation: Self-balancing BST tree (Red-Black-Tree)
  Search time : log(n)
  Insertion time : log(n) + Rebalance 
  Deletion time : log(n) + Rebalance 
  
  Use when we need:
  1 - Ordered data
  2 - print/access in sorted order
  3 - Predecessor/successor of elements 
  
  Unordered_map : (FAST)
  ordering: No ordering 
  Implementation: Hash Table
  Search time : O(1) --> Average and O(n) --> Worst Case
  Insertion time : O(1) --> Average and O(n) --> Worst Case
  Deletion time :  O(1) --> Average and O(n) --> Worst Case
  
  Use this when we need:
  1 - No order only count/frequency
  2 - no traversal just single data access


Day _ 3 (13-09-2023)

Question: 3 - What is the difference between ordered and unordered_set in cpp
Answer: 
  Set: 
  Ordering: Increasing order (Default)
  Implementation: Self-balancing BST tree (Red-Black-Tree)
  Search time : log(n)
  Insertion time : log(n) + Rebalance 
  Deletion time : log(n) + Rebalance 
  
  Use when we need:
  1 - Ordered data
  2 - print/access in sorted order
  3 - Predecessor/successor of elements 
  4 - Can use binary search, lower_bound() and upper_bound() on set elements but cannot be used on unordered_set
  
  Predecessor/Successor in set: uss key se pehle wala / uss key ke baad wala iterator 
  
  Unordered_set : (FAST)
  ordering: No ordering 
  Implementation: Hash Table
  Search time : O(1) --> Average and O(n) --> Worst Case
  Insertion time : O(1) --> Average and O(n) --> Worst Case
  Deletion time :  O(1) --> Average and O(n) --> Worst Case
  
  Use this when we need:
  1 - No order only distinct count/frequency
  2 - no traversal just single data access
  
  Predecessor/Successor in unordered_set : we can't find in unordered_set 

Question: 4 - Binary Search functions in C++ STL (binary_search, lower_bound and upper_bound)
Answer:
  binary_search(start_ptr, end_ptr, num): Returns True/False
  binary_search(arr.begin(), arr.end(), 15) O(Log(N))


  lower_bound(start_ptr, end_ptr, num): O(Log(N))
  lower_bound(arr2.begin(), arr2.end(), 20)
  
  3 Possibility:
  1 - One occurrence of num: Returns pointer to num
  2 - Multiple occurrences of num: Returns pointer to the first occurrence of num
  3 - num doesn't exist: Returns a pointer to a next higher number than that (That position would be the position of nums if inserted and sorted)
  subtract arr.begin() to get index


  upper_bound(start_ptr, end_ptr, num): O(Log(N))
  upper_bound(arr2.begin(), arr2.end(), 20)
  
  3 Possibility:
  1 - One occurrence of num: Returns pointer to next higher no of num
  2 - Multiple occurrences of num: Returns pointer to the first higher of number that is next of last occurrence of  num
  3 - num doesn't exist: Returns a pointer to a next higher number than that (That position would be the position of nums if inserted and sorted)
  subtract arr.begin() to get index

DAY _ 4 (14-09-2023)
Question: 5 - What is the hashing and hash table?
Answer: 
  Hashing is the process of mapping keys and values into a hash table
  It creates fixed-size output from input using some sort of formula.
  We have a key, a Hash function, and a hash table

